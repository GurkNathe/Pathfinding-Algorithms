import { Nullable } from '../types.js';
export interface Node {
    id: string;
    key: string;
    subWord: string;
    parent: Nullable<string>;
    children: Record<string, Node>;
    docs: string[];
    end: boolean;
    word: string;
}
type FindParams = {
    term: string;
    exact?: boolean;
    tolerance?: number;
};
type FindResult = Record<string, string[]>;
export declare function create(end?: boolean, subWord?: string, key?: string): Node;
export declare function insert(root: Node, word: string, docId: string): void;
export declare function find(root: Node, { term, exact, tolerance }: FindParams): FindResult;
export declare function contains(root: Node, term: string): boolean;
export declare function removeWord(root: Node, term: string): boolean;
export declare function removeDocumentByWord(root: Node, term: string, docID: string, exact?: boolean): boolean;
export {};
