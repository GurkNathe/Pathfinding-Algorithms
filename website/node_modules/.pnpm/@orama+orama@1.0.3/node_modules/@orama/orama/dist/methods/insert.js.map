{"version":3,"sources":["../../src/methods/insert.ts"],"sourcesContent":["import { isArrayType } from '../components.js'\nimport { runMultipleHook, runSingleHook } from '../components/hooks.js'\nimport { trackInsertion } from '../components/sync-blocking-checker.js'\nimport { createError } from '../errors.js'\nimport { Document, Orama, SortValue } from '../types.js'\n\nexport async function insert(orama: Orama, doc: Document, language?: string, skipHooks?: boolean): Promise<string> {\n  const errorProperty = await orama.validateSchema(doc, orama.schema)\n  if (errorProperty) {\n    throw createError('SCHEMA_VALIDATION_FAILURE', errorProperty)\n  }\n\n  return innerInsert(orama, doc, language, skipHooks)\n}\n\nasync function innerInsert(orama: Orama, doc: Document, language?: string, skipHooks?: boolean): Promise<string> {\n  const { index, docs } = orama.data\n\n  const id = await orama.getDocumentIndexId(doc)\n\n  if (typeof id !== 'string') {\n    throw createError('DOCUMENT_ID_MUST_BE_STRING', typeof id)\n  }\n\n  if (!(await orama.documentsStore.store(docs, id, doc))) {\n    throw createError('DOCUMENT_ALREADY_EXISTS', id)\n  }\n\n  const docsCount = await orama.documentsStore.count(docs)\n\n  if (!skipHooks) {\n    await runSingleHook(orama.beforeInsert, orama, id, doc)\n  }\n\n  const indexableProperties = await orama.index.getSearchableProperties(index)\n  const indexablePropertiesWithTypes = await orama.index.getSearchablePropertiesWithTypes(index)\n  const indexableValues = await orama.getDocumentProperties(doc, indexableProperties)\n\n  for (const [key, value] of Object.entries(indexableValues)) {\n    if (typeof value === 'undefined') {\n      continue\n    }\n\n    const actualType = typeof value\n    const expectedType = indexablePropertiesWithTypes[key]\n\n    if (isArrayType(expectedType) && Array.isArray(value)) {\n      continue\n    }\n\n    if (actualType !== expectedType) {\n      throw createError('INVALID_DOCUMENT_PROPERTY', key, expectedType, actualType)\n    }\n  }\n\n  for (const prop of indexableProperties) {\n    const value = indexableValues[prop]\n    if (typeof value === 'undefined') {\n      continue\n    }\n\n    const expectedType = indexablePropertiesWithTypes[prop]\n    await orama.index.beforeInsert?.(\n      orama.data.index,\n      prop,\n      id,\n      value,\n      expectedType,\n      language,\n      orama.tokenizer,\n      docsCount,\n    )\n    await orama.index.insert(\n      orama.index,\n      orama.data.index,\n      prop,\n      id,\n      value,\n      expectedType,\n      language,\n      orama.tokenizer,\n      docsCount,\n    )\n    await orama.index.afterInsert?.(\n      orama.data.index,\n      prop,\n      id,\n      value,\n      expectedType,\n      language,\n      orama.tokenizer,\n      docsCount,\n    )\n  }\n\n  const sortableProperties = await orama.sorter.getSortableProperties(orama.data.sorting)\n  const sortablePropertiesWithTypes = await orama.sorter.getSortablePropertiesWithTypes(orama.data.sorting)\n  const sortableValues = await orama.getDocumentProperties(doc, sortableProperties)\n  for (const prop of sortableProperties) {\n    const value = sortableValues[prop] as SortValue\n    if (typeof value === 'undefined') {\n      continue\n    }\n\n    const expectedType = sortablePropertiesWithTypes[prop]\n\n    await orama.sorter.insert(orama.data.sorting, prop, id, value, expectedType, language)\n  }\n\n  if (!skipHooks) {\n    await runSingleHook(orama.afterInsert, orama, id, doc)\n  }\n\n  trackInsertion(orama)\n\n  return id\n}\n\nexport async function insertMultiple(\n  orama: Orama,\n  docs: Document[],\n  batchSize?: number,\n  language?: string,\n  skipHooks?: boolean,\n): Promise<string[]> {\n  if (!skipHooks) {\n    await runMultipleHook(orama.beforeMultipleInsert, orama, docs)\n  }\n\n  // Validate all documents before the insertion\n  const docsLength = docs.length\n  for (let i = 0; i < docsLength; i++) {\n    const errorProperty = await orama.validateSchema(docs[i], orama.schema)\n    if (errorProperty) {\n      throw createError('SCHEMA_VALIDATION_FAILURE', errorProperty)\n    }\n  }\n\n  return innerInsertMultiple(orama, docs, batchSize, language, skipHooks)\n}\n\nexport async function innerInsertMultiple(\n  orama: Orama,\n  docs: Document[],\n  batchSize?: number,\n  language?: string,\n  skipHooks?: boolean,\n): Promise<string[]> {\n  if (!batchSize) {\n    batchSize = 1000\n  }\n\n  const ids: string[] = []\n  await new Promise<void>((resolve, reject) => {\n    let i = 0\n    async function _insertMultiple() {\n      const batch = docs.slice(i * batchSize!, (i + 1) * batchSize!)\n      i++\n\n      if (!batch.length) {\n        return resolve()\n      }\n\n      for (const doc of batch) {\n        try {\n          const id = await insert(orama, doc, language, skipHooks)\n          ids.push(id)\n        } catch (err) {\n          reject(err)\n        }\n      }\n\n      setTimeout(_insertMultiple, 0)\n    }\n\n    setTimeout(_insertMultiple, 0)\n  })\n\n  if (!skipHooks) {\n    await runMultipleHook(orama.afterMultipleInsert, orama, docs)\n  }\n\n  return ids\n}\n"],"names":["isArrayType","runMultipleHook","runSingleHook","trackInsertion","createError","insert","orama","doc","language","skipHooks","errorProperty","validateSchema","schema","innerInsert","index","docs","data","id","getDocumentIndexId","documentsStore","store","docsCount","count","beforeInsert","indexableProperties","getSearchableProperties","indexablePropertiesWithTypes","getSearchablePropertiesWithTypes","indexableValues","getDocumentProperties","key","value","Object","entries","actualType","expectedType","Array","isArray","prop","tokenizer","afterInsert","sortableProperties","sorter","getSortableProperties","sorting","sortablePropertiesWithTypes","getSortablePropertiesWithTypes","sortableValues","insertMultiple","batchSize","beforeMultipleInsert","docsLength","length","i","innerInsertMultiple","ids","Promise","resolve","reject","_insertMultiple","batch","slice","push","err","setTimeout","afterMultipleInsert"],"mappings":"AAAA,SAASA,WAAW,QAAQ,mBAAkB;AAC9C,SAASC,eAAe,EAAEC,aAAa,QAAQ,yBAAwB;AACvE,SAASC,cAAc,QAAQ,yCAAwC;AACvE,SAASC,WAAW,QAAQ,eAAc;AAG1C,OAAO,eAAeC,OAAOC,KAAY,EAAEC,GAAa,EAAEC,QAAiB,EAAEC,SAAmB,EAAmB;IACjH,MAAMC,gBAAgB,MAAMJ,MAAMK,cAAc,CAACJ,KAAKD,MAAMM,MAAM;IAClE,IAAIF,eAAe;QACjB,MAAMN,YAAY,6BAA6BM,eAAc;IAC/D,CAAC;IAED,OAAOG,YAAYP,OAAOC,KAAKC,UAAUC;AAC3C,CAAC;AAED,eAAeI,YAAYP,KAAY,EAAEC,GAAa,EAAEC,QAAiB,EAAEC,SAAmB,EAAmB;IAC/G,MAAM,EAAEK,MAAK,EAAEC,KAAI,EAAE,GAAGT,MAAMU,IAAI;IAElC,MAAMC,KAAK,MAAMX,MAAMY,kBAAkB,CAACX;IAE1C,IAAI,OAAOU,OAAO,UAAU;QAC1B,MAAMb,YAAY,8BAA8B,OAAOa,IAAG;IAC5D,CAAC;IAED,IAAI,CAAE,MAAMX,MAAMa,cAAc,CAACC,KAAK,CAACL,MAAME,IAAIV,MAAO;QACtD,MAAMH,YAAY,2BAA2Ba,IAAG;IAClD,CAAC;IAED,MAAMI,YAAY,MAAMf,MAAMa,cAAc,CAACG,KAAK,CAACP;IAEnD,IAAI,CAACN,WAAW;QACd,MAAMP,cAAcI,MAAMiB,YAAY,EAAEjB,OAAOW,IAAIV;IACrD,CAAC;IAED,MAAMiB,sBAAsB,MAAMlB,MAAMQ,KAAK,CAACW,uBAAuB,CAACX;IACtE,MAAMY,+BAA+B,MAAMpB,MAAMQ,KAAK,CAACa,gCAAgC,CAACb;IACxF,MAAMc,kBAAkB,MAAMtB,MAAMuB,qBAAqB,CAACtB,KAAKiB;IAE/D,KAAK,MAAM,CAACM,KAAKC,MAAM,IAAIC,OAAOC,OAAO,CAACL,iBAAkB;QAC1D,IAAI,OAAOG,UAAU,aAAa;YAChC,QAAQ;QACV,CAAC;QAED,MAAMG,aAAa,OAAOH;QAC1B,MAAMI,eAAeT,4BAA4B,CAACI,IAAI;QAEtD,IAAI9B,YAAYmC,iBAAiBC,MAAMC,OAAO,CAACN,QAAQ;YACrD,QAAQ;QACV,CAAC;QAED,IAAIG,eAAeC,cAAc;YAC/B,MAAM/B,YAAY,6BAA6B0B,KAAKK,cAAcD,YAAW;QAC/E,CAAC;IACH;IAEA,KAAK,MAAMI,QAAQd,oBAAqB;YAOhClB,cAAAA,2BAqBAA,eAAAA;QA3BN,MAAMyB,QAAQH,eAAe,CAACU,KAAK;QACnC,IAAI,OAAOP,UAAU,aAAa;YAChC,QAAQ;QACV,CAAC;QAED,MAAMI,eAAeT,4BAA4B,CAACY,KAAK;QACvD,OAAMhC,CAAAA,4BAAAA,CAAAA,eAAAA,MAAMQ,KAAK,EAACS,YAAY,cAAxBjB,uCAAAA,KAAAA,IAAAA,0BAAAA,KAAAA,cACJA,MAAMU,IAAI,CAACF,KAAK,EAChBwB,MACArB,IACAc,OACAI,cACA3B,UACAF,MAAMiC,SAAS,EACflB;QAEF,MAAMf,MAAMQ,KAAK,CAACT,MAAM,CACtBC,MAAMQ,KAAK,EACXR,MAAMU,IAAI,CAACF,KAAK,EAChBwB,MACArB,IACAc,OACAI,cACA3B,UACAF,MAAMiC,SAAS,EACflB;QAEF,OAAMf,CAAAA,2BAAAA,CAAAA,gBAAAA,MAAMQ,KAAK,EAAC0B,WAAW,cAAvBlC,sCAAAA,KAAAA,IAAAA,yBAAAA,KAAAA,eACJA,MAAMU,IAAI,CAACF,KAAK,EAChBwB,MACArB,IACAc,OACAI,cACA3B,UACAF,MAAMiC,SAAS,EACflB;IAEJ;IAEA,MAAMoB,qBAAqB,MAAMnC,MAAMoC,MAAM,CAACC,qBAAqB,CAACrC,MAAMU,IAAI,CAAC4B,OAAO;IACtF,MAAMC,8BAA8B,MAAMvC,MAAMoC,MAAM,CAACI,8BAA8B,CAACxC,MAAMU,IAAI,CAAC4B,OAAO;IACxG,MAAMG,iBAAiB,MAAMzC,MAAMuB,qBAAqB,CAACtB,KAAKkC;IAC9D,KAAK,MAAMH,QAAQG,mBAAoB;QACrC,MAAMV,QAAQgB,cAAc,CAACT,KAAK;QAClC,IAAI,OAAOP,UAAU,aAAa;YAChC,QAAQ;QACV,CAAC;QAED,MAAMI,eAAeU,2BAA2B,CAACP,KAAK;QAEtD,MAAMhC,MAAMoC,MAAM,CAACrC,MAAM,CAACC,MAAMU,IAAI,CAAC4B,OAAO,EAAEN,MAAMrB,IAAIc,OAAOI,cAAc3B;IAC/E;IAEA,IAAI,CAACC,WAAW;QACd,MAAMP,cAAcI,MAAMkC,WAAW,EAAElC,OAAOW,IAAIV;IACpD,CAAC;IAEDJ,eAAeG;IAEf,OAAOW;AACT;AAEA,OAAO,eAAe+B,eACpB1C,KAAY,EACZS,IAAgB,EAChBkC,SAAkB,EAClBzC,QAAiB,EACjBC,SAAmB,EACA;IACnB,IAAI,CAACA,WAAW;QACd,MAAMR,gBAAgBK,MAAM4C,oBAAoB,EAAE5C,OAAOS;IAC3D,CAAC;IAED,8CAA8C;IAC9C,MAAMoC,aAAapC,KAAKqC,MAAM;IAC9B,IAAK,IAAIC,IAAI,GAAGA,IAAIF,YAAYE,IAAK;QACnC,MAAM3C,gBAAgB,MAAMJ,MAAMK,cAAc,CAACI,IAAI,CAACsC,EAAE,EAAE/C,MAAMM,MAAM;QACtE,IAAIF,eAAe;YACjB,MAAMN,YAAY,6BAA6BM,eAAc;QAC/D,CAAC;IACH;IAEA,OAAO4C,oBAAoBhD,OAAOS,MAAMkC,WAAWzC,UAAUC;AAC/D,CAAC;AAED,OAAO,eAAe6C,oBACpBhD,KAAY,EACZS,IAAgB,EAChBkC,SAAkB,EAClBzC,QAAiB,EACjBC,SAAmB,EACA;IACnB,IAAI,CAACwC,WAAW;QACdA,YAAY;IACd,CAAC;IAED,MAAMM,MAAgB,EAAE;IACxB,MAAM,IAAIC,QAAc,CAACC,SAASC,SAAW;QAC3C,IAAIL,IAAI;QACR,eAAeM,kBAAkB;YAC/B,MAAMC,QAAQ7C,KAAK8C,KAAK,CAACR,IAAIJ,WAAY,AAACI,CAAAA,IAAI,CAAA,IAAKJ;YACnDI;YAEA,IAAI,CAACO,MAAMR,MAAM,EAAE;gBACjB,OAAOK;YACT,CAAC;YAED,KAAK,MAAMlD,OAAOqD,MAAO;gBACvB,IAAI;oBACF,MAAM3C,KAAK,MAAMZ,OAAOC,OAAOC,KAAKC,UAAUC;oBAC9C8C,IAAIO,IAAI,CAAC7C;gBACX,EAAE,OAAO8C,KAAK;oBACZL,OAAOK;gBACT;YACF;YAEAC,WAAWL,iBAAiB;QAC9B;QAEAK,WAAWL,iBAAiB;IAC9B;IAEA,IAAI,CAAClD,WAAW;QACd,MAAMR,gBAAgBK,MAAM2D,mBAAmB,EAAE3D,OAAOS;IAC1D,CAAC;IAED,OAAOwC;AACT,CAAC"}