import type { Document, SearchableValue, TokenScore } from './types.js';
export declare const isServer: boolean;
export declare function sprintf(template: string, ...args: (string | number)[]): string;
export declare function formatBytes(bytes: number, decimals?: number): Promise<string>;
export declare function formatNanoseconds(value: number | bigint): Promise<string>;
export declare function getNanosecondsTime(): Promise<bigint>;
export declare function uniqueId(): Promise<string>;
export declare function syncUniqueId(): string;
export declare function getOwnProperty<T = unknown>(object: Record<string, T>, property: string): T | undefined;
export declare function getTokenFrequency(token: string, tokens: string[]): number;
export declare function insertSortedValue(arr: TokenScore[], el: TokenScore, compareFn?: typeof sortTokenScorePredicate): TokenScore[];
export declare function sortTokenScorePredicate(a: TokenScore, b: TokenScore): number;
export declare function intersect<T>(arrays: ReadonlyArray<T>[]): T[];
export declare function getDocumentProperties(doc: Document, paths: string[]): Promise<Record<string, SearchableValue>>;
export declare function getNested<T = SearchableValue>(obj: object, path: string): Promise<T | undefined>;
export declare function flattenObject(obj: object, prefix?: string): Document;
