{"version":3,"sources":["../../../src/components/tokenizer/diacritics.ts"],"sourcesContent":["const DIACRITICS_CHARCODE_START = 192\nconst DIACRITICS_CHARCODE_END = 383\n\nconst CHARCODE_REPLACE_MAPPING = [\n  65,\n  65,\n  65,\n  65,\n  65,\n  65,\n  65,\n  67,\n  69,\n  69,\n  69,\n  69,\n  73,\n  73,\n  73,\n  73,\n  69,\n  78,\n  79,\n  79,\n  79,\n  79,\n  79,\n  null,\n  79,\n  85,\n  85,\n  85,\n  85,\n  89,\n  80,\n  115,\n  97,\n  97,\n  97,\n  97,\n  97,\n  97,\n  97,\n  99,\n  101,\n  101,\n  101,\n  101,\n  105,\n  105,\n  105,\n  105,\n  101,\n  110,\n  111,\n  111,\n  111,\n  111,\n  111,\n  null,\n  111,\n  117,\n  117,\n  117,\n  117,\n  121,\n  112,\n  121,\n  65,\n  97,\n  65,\n  97,\n  65,\n  97,\n  67,\n  99,\n  67,\n  99,\n  67,\n  99,\n  67,\n  99,\n  68,\n  100,\n  68,\n  100,\n  69,\n  101,\n  69,\n  101,\n  69,\n  101,\n  69,\n  101,\n  69,\n  101,\n  71,\n  103,\n  71,\n  103,\n  71,\n  103,\n  71,\n  103,\n  72,\n  104,\n  72,\n  104,\n  73,\n  105,\n  73,\n  105,\n  73,\n  105,\n  73,\n  105,\n  73,\n  105,\n  73,\n  105,\n  74,\n  106,\n  75,\n  107,\n  107,\n  76,\n  108,\n  76,\n  108,\n  76,\n  108,\n  76,\n  108,\n  76,\n  108,\n  78,\n  110,\n  78,\n  110,\n  78,\n  110,\n  110,\n  78,\n  110,\n  79,\n  111,\n  79,\n  111,\n  79,\n  111,\n  79,\n  111,\n  82,\n  114,\n  82,\n  114,\n  82,\n  114,\n  83,\n  115,\n  83,\n  115,\n  83,\n  115,\n  83,\n  115,\n  84,\n  116,\n  84,\n  116,\n  84,\n  116,\n  85,\n  117,\n  85,\n  117,\n  85,\n  117,\n  85,\n  117,\n  85,\n  117,\n  85,\n  117,\n  87,\n  119,\n  89,\n  121,\n  89,\n  90,\n  122,\n  90,\n  122,\n  90,\n  122,\n  115,\n]\n\nfunction replaceChar(charCode: number): number {\n  if (charCode < DIACRITICS_CHARCODE_START || charCode > DIACRITICS_CHARCODE_END) return charCode\n\n  /* c8 ignore next  */\n  return CHARCODE_REPLACE_MAPPING[charCode - DIACRITICS_CHARCODE_START] || charCode\n}\n\nexport function replaceDiacritics(str: string): string {\n  const stringCharCode = []\n  for (let idx = 0; idx < str.length; idx++) {\n    stringCharCode[idx] = replaceChar(str.charCodeAt(idx))\n  }\n  return String.fromCharCode(...stringCharCode)\n}\n"],"names":["DIACRITICS_CHARCODE_START","DIACRITICS_CHARCODE_END","CHARCODE_REPLACE_MAPPING","replaceChar","charCode","replaceDiacritics","str","stringCharCode","idx","length","charCodeAt","String","fromCharCode"],"mappings":"AAAA,MAAMA,4BAA4B;AAClC,MAAMC,0BAA0B;AAEhC,MAAMC,2BAA2B;IAC/B;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAI;IACJ;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAI;IACJ;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;CACD;AAED,SAASC,YAAYC,QAAgB,EAAU;IAC7C,IAAIA,WAAWJ,6BAA6BI,WAAWH,yBAAyB,OAAOG;IAEvF,mBAAmB,GACnB,OAAOF,wBAAwB,CAACE,WAAWJ,0BAA0B,IAAII;AAC3E;AAEA,OAAO,SAASC,kBAAkBC,GAAW,EAAU;IACrD,MAAMC,iBAAiB,EAAE;IACzB,IAAK,IAAIC,MAAM,GAAGA,MAAMF,IAAIG,MAAM,EAAED,MAAO;QACzCD,cAAc,CAACC,IAAI,GAAGL,YAAYG,IAAII,UAAU,CAACF;IACnD;IACA,OAAOG,OAAOC,YAAY,IAAIL;AAChC,CAAC"}