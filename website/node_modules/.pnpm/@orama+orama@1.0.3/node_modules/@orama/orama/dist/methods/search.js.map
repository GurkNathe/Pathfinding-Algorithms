{"version":3,"sources":["../../src/methods/search.ts"],"sourcesContent":["import { prioritizeTokenScores } from '../components/algorithms.js'\nimport { getFacets } from '../components/facets.js'\nimport { intersectFilteredIDs } from '../components/filters.js'\nimport { getGroups } from '../components/groups.js'\nimport { createError } from '../errors.js'\nimport {\n  BM25Params,\n  IndexMap,\n  Orama,\n  Result,\n  Results,\n  SearchContext,\n  SearchParams,\n  TokenMap,\n  ElapsedTime,\n  IIndex,\n  Tokenizer,\n  IDocumentsStore,\n  CustomSorterFunctionItem,\n  OpaqueIndex,\n  OpaqueDocumentStore,\n  SearchableValue,\n} from '../types.js'\nimport { getNanosecondsTime, getNested, sortTokenScorePredicate } from '../utils.js'\n\nconst defaultBM25Params: BM25Params = {\n  k: 1.2,\n  b: 0.75,\n  d: 0.5,\n}\n\nasync function createSearchContext<I extends OpaqueIndex, D extends OpaqueDocumentStore, AggValue>(\n  tokenizer: Tokenizer,\n  index: IIndex<I>,\n  documentsStore: IDocumentsStore<D>,\n  language: string | undefined,\n  params: SearchParams<AggValue>,\n  properties: string[],\n  tokens: string[],\n  docsCount: number,\n): Promise<SearchContext<I, D, AggValue>> {\n  // If filters are enabled, we need to get the IDs of the documents that match the filters.\n  // const hasFilters = Object.keys(params.where ?? {}).length > 0;\n  // let whereFiltersIDs: string[] = [];\n\n  // if (hasFilters) {\n  //   whereFiltersIDs = getWhereFiltersIDs(params.where!, orama);\n  // }\n\n  // indexMap is an object containing all the indexes considered for the current search,\n  // and an array of doc IDs for each token in all the indices.\n  //\n  // Given the search term \"quick brown fox\" on the \"description\" index,\n  // indexMap will look like this:\n  //\n  // {\n  //   description: {\n  //     quick: [doc1, doc2, doc3],\n  //     brown: [doc2, doc4],\n  //     fox:   [doc2]\n  //   }\n  // }\n  const indexMap: IndexMap = {}\n\n  // After we create the indexMap, we need to calculate the intersection\n  // between all the postings lists for each token.\n  // Given the example above, docsIntersection will look like this:\n  //\n  // {\n  //   description: [doc2]\n  // }\n  //\n  // as doc2 is the only document present in all the postings lists for the \"description\" index.\n  const docsIntersection: TokenMap = {}\n\n  for (const prop of properties) {\n    const tokensMap: TokenMap = {}\n    for (const token of tokens) {\n      tokensMap[token] = []\n    }\n    indexMap[prop] = tokensMap\n    docsIntersection[prop] = []\n  }\n\n  return {\n    timeStart: await getNanosecondsTime(),\n    tokenizer,\n    index,\n    documentsStore,\n    language,\n    params,\n    docsCount,\n    uniqueDocsIDs: {},\n    indexMap,\n    docsIntersection,\n  }\n}\n\nexport async function search<AggValue = Result[]>(orama: Orama, params: SearchParams<AggValue>, language?: string): Promise<Results<AggValue>> {\n  params.relevance = Object.assign(params.relevance ?? {}, defaultBM25Params)\n\n  const shouldCalculateFacets = params.facets && Object.keys(params.facets).length > 0\n  const { limit = 10, offset = 0, term, properties, threshold = 1, distinctOn } = params\n  const isPreflight = params.preflight === true\n\n  const { index, docs } = orama.data\n  const tokens = await orama.tokenizer.tokenize(term ?? '', language)\n\n  // Get searchable string properties\n  let propertiesToSearch = orama.caches['propertiesToSearch'] as string[]\n  if (!propertiesToSearch) {\n    const propertiesToSearchWithTypes = await orama.index.getSearchablePropertiesWithTypes(index)\n\n    propertiesToSearch = await orama.index.getSearchableProperties(index)\n    propertiesToSearch = propertiesToSearch.filter((prop: string) =>\n      propertiesToSearchWithTypes[prop].startsWith('string'),\n    )\n\n    orama.caches['propertiesToSearch'] = propertiesToSearch\n  }\n\n  if (properties && properties !== '*') {\n    for (const prop of properties) {\n      if (!propertiesToSearch.includes(prop)) {\n        throw createError('UNKNOWN_INDEX', prop, propertiesToSearch.join(', '))\n      }\n    }\n\n    propertiesToSearch = propertiesToSearch.filter((prop: string) => properties.includes(prop))\n  }\n\n  // Create the search context and the results\n  const context = await createSearchContext(\n    orama.tokenizer,\n    orama.index,\n    orama.documentsStore,\n    language,\n    params,\n    propertiesToSearch,\n    tokens,\n    await orama.documentsStore.count(docs),\n  )\n\n  // If filters are enabled, we need to get the IDs of the documents that match the filters.\n  const hasFilters = Object.keys(params.where ?? {}).length > 0\n  let whereFiltersIDs: string[] = []\n\n  if (hasFilters) {\n    whereFiltersIDs = await orama.index.searchByWhereClause(context, index, params.where!)\n  }\n\n  if (tokens.length) {\n    // Now it's time to loop over all the indices and get the documents IDs for every single term\n    const indexesLength = propertiesToSearch.length\n    for (let i = 0; i < indexesLength; i++) {\n      const prop = propertiesToSearch[i]\n\n      const tokensLength = tokens.length\n      for (let j = 0; j < tokensLength; j++) {\n        const term = tokens[j]\n\n        // Lookup\n        const scoreList = await orama.index.search(context, index, prop, term)\n\n        context.indexMap[prop][term].push(...scoreList)\n      }\n\n      const docIds = context.indexMap[prop]\n      const vals = Object.values(docIds)\n      context.docsIntersection[prop] = prioritizeTokenScores(vals, params?.boost?.[prop] ?? 1, threshold)\n      const uniqueDocs = context.docsIntersection[prop]\n\n      const uniqueDocsLength = uniqueDocs.length\n      for (let i = 0; i < uniqueDocsLength; i++) {\n        const [id, score] = uniqueDocs[i]\n\n        const prevScore = context.uniqueDocsIDs[id]\n        if (prevScore) {\n          context.uniqueDocsIDs[id] = prevScore + score + 0.5\n        } else {\n          context.uniqueDocsIDs[id] = score\n        }\n      }\n    }\n  } else if (tokens.length === 0 && term) {\n    // This case is hard to handle correctly.\n    // For the time being, if tokenizer returns empty array but the term is not empty,\n    // we returns an empty result set\n    context.uniqueDocsIDs = {}\n  } else {\n    context.uniqueDocsIDs = Object.fromEntries(\n      Object.keys(await orama.documentsStore.getAll(orama.data.docs)).map(k => [k, 0]),\n    )\n  }\n\n  // Get unique doc IDs from uniqueDocsIDs map\n  let uniqueDocsArray = Object.entries(context.uniqueDocsIDs)\n\n  // If filters are enabled, we need to remove the IDs of the documents that don't match the filters.\n  if (hasFilters) {\n    uniqueDocsArray = intersectFilteredIDs(whereFiltersIDs, uniqueDocsArray)\n  }\n\n  if (params.sortBy) {\n    if (typeof params.sortBy === 'function') {\n      const ids: string[] = uniqueDocsArray.map(([id]) => id)\n      const docs = await orama.documentsStore.getMultiple(orama.data.docs, ids)\n      const docsWithIdAndScore: CustomSorterFunctionItem[] = docs.map((d, i) => [\n        uniqueDocsArray[i][0],\n        uniqueDocsArray[i][1],\n        d!,\n      ])\n      docsWithIdAndScore.sort(params.sortBy)\n      uniqueDocsArray = docsWithIdAndScore.map(([id, score]) => [id, score])\n    } else {\n      uniqueDocsArray = await orama.sorter.sortBy(orama.data.sorting, uniqueDocsArray, params.sortBy)\n    }\n  } else {\n    uniqueDocsArray = uniqueDocsArray.sort(sortTokenScorePredicate)\n  }\n\n  let results\n  if (!isPreflight && distinctOn) {\n    results = await fetchDocumentsWithDistinct(orama, uniqueDocsArray, offset, limit, distinctOn)\n  } else if (!isPreflight) {\n    results = await fetchDocuments(orama, uniqueDocsArray, offset, limit)\n  }\n\n  const searchResult: Results<AggValue> = {\n    elapsed: {\n      raw: 0,\n      formatted: '',\n    },\n    // We keep the hits array empty if it's a preflight request.\n    hits: [],\n    count: uniqueDocsArray.length,\n  }\n\n  if (typeof results !== 'undefined') {\n    searchResult.hits = results.filter(Boolean)\n  }\n\n  if (shouldCalculateFacets) {\n    // Populate facets if needed\n    const facets = await getFacets(orama, uniqueDocsArray, params.facets!)\n    searchResult.facets = facets\n  }\n\n  if (params.groupBy) {\n    searchResult.groups = await getGroups(orama, uniqueDocsArray, params.groupBy)\n  }\n\n  searchResult.elapsed = (await orama.formatElapsedTime(\n    (await getNanosecondsTime()) - context.timeStart,\n  )) as ElapsedTime\n\n  return searchResult\n}\n\nasync function fetchDocumentsWithDistinct(\n  orama: Orama,\n  uniqueDocsArray: [string, number][],\n  offset: number,\n  limit: number,\n  distinctOn: string,\n): Promise<Result[]> {\n  const docs = orama.data.docs\n\n  // Keep track which values we already seen\n  const values = new Map<SearchableValue, true>()\n\n  // We cannot know how many results we will have in the end,\n  // so we need cannot pre-allocate the array.\n  const results: Result[] = []\n\n  const resultIDs: Set<string> = new Set()\n  const uniqueDocsArrayLength = uniqueDocsArray.length\n  let count = 0\n  for (let i = 0; i < uniqueDocsArrayLength; i++) {\n    const idAndScore = uniqueDocsArray[i]\n\n    // If there are no more results, just break the loop\n    if (typeof idAndScore === 'undefined') {\n      continue\n    }\n\n    const [id, score] = idAndScore\n\n    if (resultIDs.has(id)) {\n      continue\n    }\n\n    const doc = await orama.documentsStore.get(docs, id)\n    const value = await getNested(doc as object, distinctOn)\n    if (typeof value === 'undefined' || values.has(value)) {\n      continue\n    }\n    values.set(value, true)\n\n    count++\n    // We shouldn't consider the document if it's not in the offset range\n    if (count <= offset) {\n      continue\n    }\n\n    results.push({ id, score, document: doc! })\n    resultIDs.add(id)\n\n    // reached the limit, break the loop\n    if (count >= offset + limit) {\n      break\n    }\n  }\n\n  return results\n}\n\nasync function fetchDocuments(\n  orama: Orama,\n  uniqueDocsArray: [string, number][],\n  offset: number,\n  limit: number,\n): Promise<Result[]> {\n  const docs = orama.data.docs\n\n  const results: Result[] = Array.from({\n    length: limit,\n  })\n\n  const resultIDs: Set<string> = new Set()\n\n  // We already have the list of ALL the document IDs containing the search terms.\n  // We loop over them starting from a positional value \"offset\" and ending at \"offset + limit\"\n  // to provide pagination capabilities to the search.\n  for (let i = offset; i < limit + offset; i++) {\n    const idAndScore = uniqueDocsArray[i]\n\n    // If there are no more results, just break the loop\n    if (typeof idAndScore === 'undefined') {\n      break\n    }\n\n    const [id, score] = idAndScore\n\n    if (!resultIDs.has(id)) {\n      // We retrieve the full document only AFTER making sure that we really want it.\n      // We never retrieve the full document preventively.\n      const fullDoc = await orama.documentsStore.get(docs, id)\n      results[i] = { id, score, document: fullDoc! }\n      resultIDs.add(id)\n    }\n  }\n  return results\n}"],"names":["prioritizeTokenScores","getFacets","intersectFilteredIDs","getGroups","createError","getNanosecondsTime","getNested","sortTokenScorePredicate","defaultBM25Params","k","b","d","createSearchContext","tokenizer","index","documentsStore","language","params","properties","tokens","docsCount","indexMap","docsIntersection","prop","tokensMap","token","timeStart","uniqueDocsIDs","search","orama","relevance","Object","assign","shouldCalculateFacets","facets","keys","length","limit","offset","term","threshold","distinctOn","isPreflight","preflight","docs","data","tokenize","propertiesToSearch","caches","propertiesToSearchWithTypes","getSearchablePropertiesWithTypes","getSearchableProperties","filter","startsWith","includes","join","context","count","hasFilters","where","whereFiltersIDs","searchByWhereClause","indexesLength","i","tokensLength","j","scoreList","push","docIds","vals","values","boost","uniqueDocs","uniqueDocsLength","id","score","prevScore","fromEntries","getAll","map","uniqueDocsArray","entries","sortBy","ids","getMultiple","docsWithIdAndScore","sort","sorter","sorting","results","fetchDocumentsWithDistinct","fetchDocuments","searchResult","elapsed","raw","formatted","hits","Boolean","groupBy","groups","formatElapsedTime","Map","resultIDs","Set","uniqueDocsArrayLength","idAndScore","has","doc","get","value","set","document","add","Array","from","fullDoc"],"mappings":"AAAA,SAASA,qBAAqB,QAAQ,8BAA6B;AACnE,SAASC,SAAS,QAAQ,0BAAyB;AACnD,SAASC,oBAAoB,QAAQ,2BAA0B;AAC/D,SAASC,SAAS,QAAQ,0BAAyB;AACnD,SAASC,WAAW,QAAQ,eAAc;AAmB1C,SAASC,kBAAkB,EAAEC,SAAS,EAAEC,uBAAuB,QAAQ,cAAa;AAEpF,MAAMC,oBAAgC;IACpCC,GAAG;IACHC,GAAG;IACHC,GAAG;AACL;AAEA,eAAeC,oBACbC,SAAoB,EACpBC,KAAgB,EAChBC,cAAkC,EAClCC,QAA4B,EAC5BC,MAA8B,EAC9BC,UAAoB,EACpBC,MAAgB,EAChBC,SAAiB,EACuB;IACxC,0FAA0F;IAC1F,iEAAiE;IACjE,sCAAsC;IAEtC,oBAAoB;IACpB,gEAAgE;IAChE,IAAI;IAEJ,sFAAsF;IACtF,6DAA6D;IAC7D,EAAE;IACF,sEAAsE;IACtE,gCAAgC;IAChC,EAAE;IACF,IAAI;IACJ,mBAAmB;IACnB,iCAAiC;IACjC,2BAA2B;IAC3B,oBAAoB;IACpB,MAAM;IACN,IAAI;IACJ,MAAMC,WAAqB,CAAC;IAE5B,sEAAsE;IACtE,iDAAiD;IACjD,iEAAiE;IACjE,EAAE;IACF,IAAI;IACJ,wBAAwB;IACxB,IAAI;IACJ,EAAE;IACF,8FAA8F;IAC9F,MAAMC,mBAA6B,CAAC;IAEpC,KAAK,MAAMC,QAAQL,WAAY;QAC7B,MAAMM,YAAsB,CAAC;QAC7B,KAAK,MAAMC,SAASN,OAAQ;YAC1BK,SAAS,CAACC,MAAM,GAAG,EAAE;QACvB;QACAJ,QAAQ,CAACE,KAAK,GAAGC;QACjBF,gBAAgB,CAACC,KAAK,GAAG,EAAE;IAC7B;IAEA,OAAO;QACLG,WAAW,MAAMrB;QACjBQ;QACAC;QACAC;QACAC;QACAC;QACAG;QACAO,eAAe,CAAC;QAChBN;QACAC;IACF;AACF;AAEA,OAAO,eAAeM,OAA4BC,KAAY,EAAEZ,MAA8B,EAAED,QAAiB,EAA8B;IAC7IC,OAAOa,SAAS,GAAGC,OAAOC,MAAM,CAACf,OAAOa,SAAS,IAAI,CAAC,GAAGtB;IAEzD,MAAMyB,wBAAwBhB,OAAOiB,MAAM,IAAIH,OAAOI,IAAI,CAAClB,OAAOiB,MAAM,EAAEE,MAAM,GAAG;IACnF,MAAM,EAAEC,OAAQ,GAAE,EAAEC,QAAS,EAAC,EAAEC,KAAI,EAAErB,WAAU,EAAEsB,WAAY,EAAC,EAAEC,WAAU,EAAE,GAAGxB;IAChF,MAAMyB,cAAczB,OAAO0B,SAAS,KAAK,IAAI;IAE7C,MAAM,EAAE7B,MAAK,EAAE8B,KAAI,EAAE,GAAGf,MAAMgB,IAAI;IAClC,MAAM1B,SAAS,MAAMU,MAAMhB,SAAS,CAACiC,QAAQ,CAACP,QAAQ,IAAIvB;IAE1D,mCAAmC;IACnC,IAAI+B,qBAAqBlB,MAAMmB,MAAM,CAAC,qBAAqB;IAC3D,IAAI,CAACD,oBAAoB;QACvB,MAAME,8BAA8B,MAAMpB,MAAMf,KAAK,CAACoC,gCAAgC,CAACpC;QAEvFiC,qBAAqB,MAAMlB,MAAMf,KAAK,CAACqC,uBAAuB,CAACrC;QAC/DiC,qBAAqBA,mBAAmBK,MAAM,CAAC,CAAC7B,OAC9C0B,2BAA2B,CAAC1B,KAAK,CAAC8B,UAAU,CAAC;QAG/CxB,MAAMmB,MAAM,CAAC,qBAAqB,GAAGD;IACvC,CAAC;IAED,IAAI7B,cAAcA,eAAe,KAAK;QACpC,KAAK,MAAMK,QAAQL,WAAY;YAC7B,IAAI,CAAC6B,mBAAmBO,QAAQ,CAAC/B,OAAO;gBACtC,MAAMnB,YAAY,iBAAiBmB,MAAMwB,mBAAmBQ,IAAI,CAAC,OAAM;YACzE,CAAC;QACH;QAEAR,qBAAqBA,mBAAmBK,MAAM,CAAC,CAAC7B,OAAiBL,WAAWoC,QAAQ,CAAC/B;IACvF,CAAC;IAED,4CAA4C;IAC5C,MAAMiC,UAAU,MAAM5C,oBACpBiB,MAAMhB,SAAS,EACfgB,MAAMf,KAAK,EACXe,MAAMd,cAAc,EACpBC,UACAC,QACA8B,oBACA5B,QACA,MAAMU,MAAMd,cAAc,CAAC0C,KAAK,CAACb;IAGnC,0FAA0F;IAC1F,MAAMc,aAAa3B,OAAOI,IAAI,CAAClB,OAAO0C,KAAK,IAAI,CAAC,GAAGvB,MAAM,GAAG;IAC5D,IAAIwB,kBAA4B,EAAE;IAElC,IAAIF,YAAY;QACdE,kBAAkB,MAAM/B,MAAMf,KAAK,CAAC+C,mBAAmB,CAACL,SAAS1C,OAAOG,OAAO0C,KAAK;IACtF,CAAC;IAED,IAAIxC,OAAOiB,MAAM,EAAE;QACjB,6FAA6F;QAC7F,MAAM0B,gBAAgBf,mBAAmBX,MAAM;QAC/C,IAAK,IAAI2B,IAAI,GAAGA,IAAID,eAAeC,IAAK;gBAeuB9C;YAd7D,MAAMM,OAAOwB,kBAAkB,CAACgB,EAAE;YAElC,MAAMC,eAAe7C,OAAOiB,MAAM;YAClC,IAAK,IAAI6B,IAAI,GAAGA,IAAID,cAAcC,IAAK;gBACrC,MAAM1B,OAAOpB,MAAM,CAAC8C,EAAE;gBAEtB,SAAS;gBACT,MAAMC,YAAY,MAAMrC,MAAMf,KAAK,CAACc,MAAM,CAAC4B,SAAS1C,OAAOS,MAAMgB;gBAEjEiB,QAAQnC,QAAQ,CAACE,KAAK,CAACgB,KAAK,CAAC4B,IAAI,IAAID;YACvC;YAEA,MAAME,SAASZ,QAAQnC,QAAQ,CAACE,KAAK;YACrC,MAAM8C,OAAOtC,OAAOuC,MAAM,CAACF;YAC3BZ,QAAQlC,gBAAgB,CAACC,KAAK,GAAGvB,sBAAsBqE,MAAMpD,CAAAA,mBAAAA,oBAAAA,KAAAA,IAAAA,CAAAA,gBAAAA,OAAQsD,KAAK,cAAbtD,2BAAAA,KAAAA,IAAAA,aAAe,CAACM,KAAK,AAAR,AAAD,KAAa,GAAGiB;YACzF,MAAMgC,aAAahB,QAAQlC,gBAAgB,CAACC,KAAK;YAEjD,MAAMkD,mBAAmBD,WAAWpC,MAAM;YAC1C,IAAK,IAAI2B,IAAI,GAAGA,IAAIU,kBAAkBV,IAAK;gBACzC,MAAM,CAACW,IAAIC,MAAM,GAAGH,UAAU,CAACT,EAAE;gBAEjC,MAAMa,YAAYpB,QAAQ7B,aAAa,CAAC+C,GAAG;gBAC3C,IAAIE,WAAW;oBACbpB,QAAQ7B,aAAa,CAAC+C,GAAG,GAAGE,YAAYD,QAAQ;gBAClD,OAAO;oBACLnB,QAAQ7B,aAAa,CAAC+C,GAAG,GAAGC;gBAC9B,CAAC;YACH;QACF;IACF,OAAO,IAAIxD,OAAOiB,MAAM,KAAK,KAAKG,MAAM;QACtC,yCAAyC;QACzC,kFAAkF;QAClF,iCAAiC;QACjCiB,QAAQ7B,aAAa,GAAG,CAAC;IAC3B,OAAO;QACL6B,QAAQ7B,aAAa,GAAGI,OAAO8C,WAAW,CACxC9C,OAAOI,IAAI,CAAC,MAAMN,MAAMd,cAAc,CAAC+D,MAAM,CAACjD,MAAMgB,IAAI,CAACD,IAAI,GAAGmC,GAAG,CAACtE,CAAAA,IAAK;gBAACA;gBAAG;aAAE;IAEnF,CAAC;IAED,4CAA4C;IAC5C,IAAIuE,kBAAkBjD,OAAOkD,OAAO,CAACzB,QAAQ7B,aAAa;IAE1D,mGAAmG;IACnG,IAAI+B,YAAY;QACdsB,kBAAkB9E,qBAAqB0D,iBAAiBoB;IAC1D,CAAC;IAED,IAAI/D,OAAOiE,MAAM,EAAE;QACjB,IAAI,OAAOjE,OAAOiE,MAAM,KAAK,YAAY;YACvC,MAAMC,MAAgBH,gBAAgBD,GAAG,CAAC,CAAC,CAACL,GAAG,GAAKA;YACpD,MAAM9B,OAAO,MAAMf,MAAMd,cAAc,CAACqE,WAAW,CAACvD,MAAMgB,IAAI,CAACD,IAAI,EAAEuC;YACrE,MAAME,qBAAiDzC,KAAKmC,GAAG,CAAC,CAACpE,GAAGoD,IAAM;oBACxEiB,eAAe,CAACjB,EAAE,CAAC,EAAE;oBACrBiB,eAAe,CAACjB,EAAE,CAAC,EAAE;oBACrBpD;iBACD;YACD0E,mBAAmBC,IAAI,CAACrE,OAAOiE,MAAM;YACrCF,kBAAkBK,mBAAmBN,GAAG,CAAC,CAAC,CAACL,IAAIC,MAAM,GAAK;oBAACD;oBAAIC;iBAAM;QACvE,OAAO;YACLK,kBAAkB,MAAMnD,MAAM0D,MAAM,CAACL,MAAM,CAACrD,MAAMgB,IAAI,CAAC2C,OAAO,EAAER,iBAAiB/D,OAAOiE,MAAM;QAChG,CAAC;IACH,OAAO;QACLF,kBAAkBA,gBAAgBM,IAAI,CAAC/E;IACzC,CAAC;IAED,IAAIkF;IACJ,IAAI,CAAC/C,eAAeD,YAAY;QAC9BgD,UAAU,MAAMC,2BAA2B7D,OAAOmD,iBAAiB1C,QAAQD,OAAOI;IACpF,OAAO,IAAI,CAACC,aAAa;QACvB+C,UAAU,MAAME,eAAe9D,OAAOmD,iBAAiB1C,QAAQD;IACjE,CAAC;IAED,MAAMuD,eAAkC;QACtCC,SAAS;YACPC,KAAK;YACLC,WAAW;QACb;QACA,4DAA4D;QAC5DC,MAAM,EAAE;QACRvC,OAAOuB,gBAAgB5C,MAAM;IAC/B;IAEA,IAAI,OAAOqD,YAAY,aAAa;QAClCG,aAAaI,IAAI,GAAGP,QAAQrC,MAAM,CAAC6C;IACrC,CAAC;IAED,IAAIhE,uBAAuB;QACzB,4BAA4B;QAC5B,MAAMC,SAAS,MAAMjC,UAAU4B,OAAOmD,iBAAiB/D,OAAOiB,MAAM;QACpE0D,aAAa1D,MAAM,GAAGA;IACxB,CAAC;IAED,IAAIjB,OAAOiF,OAAO,EAAE;QAClBN,aAAaO,MAAM,GAAG,MAAMhG,UAAU0B,OAAOmD,iBAAiB/D,OAAOiF,OAAO;IAC9E,CAAC;IAEDN,aAAaC,OAAO,GAAI,MAAMhE,MAAMuE,iBAAiB,CACnD,AAAC,MAAM/F,uBAAwBmD,QAAQ9B,SAAS;IAGlD,OAAOkE;AACT,CAAC;AAED,eAAeF,2BACb7D,KAAY,EACZmD,eAAmC,EACnC1C,MAAc,EACdD,KAAa,EACbI,UAAkB,EACC;IACnB,MAAMG,OAAOf,MAAMgB,IAAI,CAACD,IAAI;IAE5B,0CAA0C;IAC1C,MAAM0B,SAAS,IAAI+B;IAEnB,2DAA2D;IAC3D,4CAA4C;IAC5C,MAAMZ,UAAoB,EAAE;IAE5B,MAAMa,YAAyB,IAAIC;IACnC,MAAMC,wBAAwBxB,gBAAgB5C,MAAM;IACpD,IAAIqB,QAAQ;IACZ,IAAK,IAAIM,IAAI,GAAGA,IAAIyC,uBAAuBzC,IAAK;QAC9C,MAAM0C,aAAazB,eAAe,CAACjB,EAAE;QAErC,oDAAoD;QACpD,IAAI,OAAO0C,eAAe,aAAa;YACrC,QAAQ;QACV,CAAC;QAED,MAAM,CAAC/B,IAAIC,MAAM,GAAG8B;QAEpB,IAAIH,UAAUI,GAAG,CAAChC,KAAK;YACrB,QAAQ;QACV,CAAC;QAED,MAAMiC,MAAM,MAAM9E,MAAMd,cAAc,CAAC6F,GAAG,CAAChE,MAAM8B;QACjD,MAAMmC,QAAQ,MAAMvG,UAAUqG,KAAelE;QAC7C,IAAI,OAAOoE,UAAU,eAAevC,OAAOoC,GAAG,CAACG,QAAQ;YACrD,QAAQ;QACV,CAAC;QACDvC,OAAOwC,GAAG,CAACD,OAAO,IAAI;QAEtBpD;QACA,qEAAqE;QACrE,IAAIA,SAASnB,QAAQ;YACnB,QAAQ;QACV,CAAC;QAEDmD,QAAQtB,IAAI,CAAC;YAAEO;YAAIC;YAAOoC,UAAUJ;QAAK;QACzCL,UAAUU,GAAG,CAACtC;QAEd,oCAAoC;QACpC,IAAIjB,SAASnB,SAASD,OAAO;YAC3B,KAAK;QACP,CAAC;IACH;IAEA,OAAOoD;AACT;AAEA,eAAeE,eACb9D,KAAY,EACZmD,eAAmC,EACnC1C,MAAc,EACdD,KAAa,EACM;IACnB,MAAMO,OAAOf,MAAMgB,IAAI,CAACD,IAAI;IAE5B,MAAM6C,UAAoBwB,MAAMC,IAAI,CAAC;QACnC9E,QAAQC;IACV;IAEA,MAAMiE,YAAyB,IAAIC;IAEnC,gFAAgF;IAChF,6FAA6F;IAC7F,oDAAoD;IACpD,IAAK,IAAIxC,IAAIzB,QAAQyB,IAAI1B,QAAQC,QAAQyB,IAAK;QAC5C,MAAM0C,aAAazB,eAAe,CAACjB,EAAE;QAErC,oDAAoD;QACpD,IAAI,OAAO0C,eAAe,aAAa;YACrC,KAAK;QACP,CAAC;QAED,MAAM,CAAC/B,IAAIC,MAAM,GAAG8B;QAEpB,IAAI,CAACH,UAAUI,GAAG,CAAChC,KAAK;YACtB,+EAA+E;YAC/E,oDAAoD;YACpD,MAAMyC,UAAU,MAAMtF,MAAMd,cAAc,CAAC6F,GAAG,CAAChE,MAAM8B;YACrDe,OAAO,CAAC1B,EAAE,GAAG;gBAAEW;gBAAIC;gBAAOoC,UAAUI;YAAS;YAC7Cb,UAAUU,GAAG,CAACtC;QAChB,CAAC;IACH;IACA,OAAOe;AACT"}