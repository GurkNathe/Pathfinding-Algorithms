{"version":3,"sources":["../../src/components/algorithms.ts"],"sourcesContent":["import { createError } from '../errors.js'\nimport { TokenScore, BM25Params } from '../types.js'\n\nexport function prioritizeTokenScores(arrays: TokenScore[][], boost: number, threshold = 1): TokenScore[] {\n  if (boost === 0) {\n    throw createError('INVALID_BOOST_VALUE')\n  }\n\n  const tokenMap: Record<string, number> = {}\n\n  const mapsLength = arrays.length\n  for (let i = 0; i < mapsLength; i++) {\n    const arr = arrays[i]\n\n    const entriesLength = arr.length\n    for (let j = 0; j < entriesLength; j++) {\n      const [token, score] = arr[j]\n      const boostScore = score * boost\n\n      if (token in tokenMap) {\n        tokenMap[token] *= 1.5 + boostScore\n      } else {\n        tokenMap[token] = boostScore\n      }\n    }\n  }\n\n  const results = Object.entries(tokenMap).sort((a, b) => b[1] - a[1])\n\n  // If threshold is 1, it means we will return all the results with at least one search term,\n  // prioritizig the ones that contains more search terms (fuzzy match)\n  if (threshold === 1) {\n    return results\n  }\n\n  // If threshold is 0, it means we will only return all the results that contains ALL the search terms (exact match)\n  if (threshold === 0) {\n    const shortestArrayLength = Math.min(...arrays.map(arr => arr.length))\n    return results.slice(0, shortestArrayLength)\n  }\n\n  // If the theshold is between 0 and 1, we will return all the results that contains at least the threshold of search terms\n  // For example, if threshold is 0.5, we will return all the results that contains at least 50% of the search terms\n  // (fuzzy match with a minimum threshold)\n  const thresholdLength = Math.ceil((threshold * 100 * results.length) / 100)\n\n  return results.slice(0, results.length + thresholdLength)\n}\n\nexport function BM25(\n  tf: number,\n  matchingCount: number,\n  docsCount: number,\n  fieldLength: number,\n  averageFieldLength: number,\n  BM25Params: Required<BM25Params>,\n) {\n  const { k, b, d } = BM25Params\n  const idf = Math.log(1 + (docsCount - matchingCount + 0.5) / (matchingCount + 0.5))\n  return (idf * (d + tf * (k + 1))) / (tf + k * (1 - b + (b * fieldLength) / averageFieldLength))\n}\n"],"names":["createError","prioritizeTokenScores","arrays","boost","threshold","tokenMap","mapsLength","length","i","arr","entriesLength","j","token","score","boostScore","results","Object","entries","sort","a","b","shortestArrayLength","Math","min","map","slice","thresholdLength","ceil","BM25","tf","matchingCount","docsCount","fieldLength","averageFieldLength","BM25Params","k","d","idf","log"],"mappings":"AAAA,SAASA,WAAW,QAAQ,eAAc;AAG1C,OAAO,SAASC,sBAAsBC,MAAsB,EAAEC,KAAa,EAAEC,YAAY,CAAC,EAAgB;IACxG,IAAID,UAAU,GAAG;QACf,MAAMH,YAAY,uBAAsB;IAC1C,CAAC;IAED,MAAMK,WAAmC,CAAC;IAE1C,MAAMC,aAAaJ,OAAOK,MAAM;IAChC,IAAK,IAAIC,IAAI,GAAGA,IAAIF,YAAYE,IAAK;QACnC,MAAMC,MAAMP,MAAM,CAACM,EAAE;QAErB,MAAME,gBAAgBD,IAAIF,MAAM;QAChC,IAAK,IAAII,IAAI,GAAGA,IAAID,eAAeC,IAAK;YACtC,MAAM,CAACC,OAAOC,MAAM,GAAGJ,GAAG,CAACE,EAAE;YAC7B,MAAMG,aAAaD,QAAQV;YAE3B,IAAIS,SAASP,UAAU;gBACrBA,QAAQ,CAACO,MAAM,IAAI,MAAME;YAC3B,OAAO;gBACLT,QAAQ,CAACO,MAAM,GAAGE;YACpB,CAAC;QACH;IACF;IAEA,MAAMC,UAAUC,OAAOC,OAAO,CAACZ,UAAUa,IAAI,CAAC,CAACC,GAAGC,IAAMA,CAAC,CAAC,EAAE,GAAGD,CAAC,CAAC,EAAE;IAEnE,4FAA4F;IAC5F,qEAAqE;IACrE,IAAIf,cAAc,GAAG;QACnB,OAAOW;IACT,CAAC;IAED,mHAAmH;IACnH,IAAIX,cAAc,GAAG;QACnB,MAAMiB,sBAAsBC,KAAKC,GAAG,IAAIrB,OAAOsB,GAAG,CAACf,CAAAA,MAAOA,IAAIF,MAAM;QACpE,OAAOQ,QAAQU,KAAK,CAAC,GAAGJ;IAC1B,CAAC;IAED,0HAA0H;IAC1H,kHAAkH;IAClH,yCAAyC;IACzC,MAAMK,kBAAkBJ,KAAKK,IAAI,CAAC,AAACvB,YAAY,MAAMW,QAAQR,MAAM,GAAI;IAEvE,OAAOQ,QAAQU,KAAK,CAAC,GAAGV,QAAQR,MAAM,GAAGmB;AAC3C,CAAC;AAED,OAAO,SAASE,KACdC,EAAU,EACVC,aAAqB,EACrBC,SAAiB,EACjBC,WAAmB,EACnBC,kBAA0B,EAC1BC,UAAgC,EAChC;IACA,MAAM,EAAEC,EAAC,EAAEf,EAAC,EAAEgB,EAAC,EAAE,GAAGF;IACpB,MAAMG,MAAMf,KAAKgB,GAAG,CAAC,IAAI,AAACP,CAAAA,YAAYD,gBAAgB,GAAE,IAAMA,CAAAA,gBAAgB,GAAE;IAChF,OAAO,AAACO,MAAOD,CAAAA,IAAIP,KAAMM,CAAAA,IAAI,CAAA,CAAC,IAAON,CAAAA,KAAKM,IAAK,CAAA,IAAIf,IAAI,AAACA,IAAIY,cAAeC,kBAAiB,CAAC;AAC/F,CAAC"}