{"ast":null,"code":"var _jsxFileName = \"/home/krug/Coding/Python/Pathfinding-Algorithms/website/src/components/Panel.tsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport \"../css/panel.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Cell = _ref => {\n  let {\n    row: number,\n    width = 50,\n    state = \"white\"\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: `${width}px`,\n      height: `${width}px`,\n      backgroundColor: state,\n      outline: \"solid\",\n      margin: \"1px\"\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 9\n  }, this);\n};\n_c = Cell;\nexport default function Panel() {\n  _s();\n  const [grid, setGrid] = useState();\n  const [rows, setRows] = useState({\n    rows: 50,\n    toSubmit: 50\n  });\n  const [width, setWidth] = useState(10);\n  const options = [\"A*\", \"BFS\", \"DFS\"];\n  useEffect(() => {\n    makeNewGrid(rows.rows, width);\n  }, []);\n  const makeNewGrid = (rows, width) => {\n    let tempOut = [];\n    for (let j = 0; j < rows; j++) {\n      let tempIn = [];\n      for (let i = 0; i < rows; i++) {\n        tempIn.push( /*#__PURE__*/_jsxDEV(Cell, {\n          row: j,\n          width: width,\n          state: \"white\"\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 29\n        }, this));\n      }\n      tempOut.push(tempIn);\n    }\n    setGrid(tempOut);\n  };\n  const changeRows = newRows => {\n    if (isNaN(Number(newRows))) return;\n    setRows({\n      rows: rows.rows,\n      toSubmit: Number(newRows)\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"panel\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"options\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        value: rows.toSubmit,\n        onChange: event => changeRows(event.target.value),\n        onKeyDown: event => {\n          if (event.key === \"Enter\") {\n            setRows({\n              rows: rows.toSubmit,\n              toSubmit: rows.toSubmit\n            });\n            makeNewGrid(rows.toSubmit, width);\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        value: width,\n        onChange: event => setWidth(Number(event.target.value)),\n        onKeyDown: event => {\n          if (event.key === \"Enter\") {\n            setRows({\n              rows: rows.toSubmit,\n              toSubmit: rows.toSubmit\n            });\n            makeNewGrid(rows.toSubmit, width);\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'grid',\n          gridTemplateColumns: `repeat(${rows.rows}, 1fr)`\n        },\n        children: grid === null || grid === void 0 ? void 0 : grid.map(cells => {\n          return cells.map((cell, i) => {\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              children: /*#__PURE__*/_jsxDEV(Cell, {\n                row: cell.props.row,\n                width: cell.props.width,\n                state: i === 5 ? \"red\" : cell.props.state\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 95,\n                columnNumber: 37\n              }, this)\n            }, i, false, {\n              fileName: _jsxFileName,\n              lineNumber: 94,\n              columnNumber: 33\n            }, this);\n          });\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 9\n  }, this);\n}\n_s(Panel, \"jskikpJiYXJG7rOtmPZVcgHI5z4=\");\n_c2 = Panel;\nvar _c, _c2;\n$RefreshReg$(_c, \"Cell\");\n$RefreshReg$(_c2, \"Panel\");","map":{"version":3,"names":["useEffect","useState","jsxDEV","_jsxDEV","Cell","_ref","row","number","width","state","style","height","backgroundColor","outline","margin","fileName","_jsxFileName","lineNumber","columnNumber","_c","Panel","_s","grid","setGrid","rows","setRows","toSubmit","setWidth","options","makeNewGrid","tempOut","j","tempIn","i","push","changeRows","newRows","isNaN","Number","className","children","value","onChange","event","target","onKeyDown","key","display","gridTemplateColumns","map","cells","cell","props","_c2","$RefreshReg$"],"sources":["/home/krug/Coding/Python/Pathfinding-Algorithms/website/src/components/Panel.tsx"],"sourcesContent":["import { useEffect, useState } from \"react\";\n\nimport \"../css/panel.css\"\n\ntype CellProps = {\n    row: number\n    width: number\n    state: States\n}\n\ntype States = \"white\" | \"red\" | \"green\" | \"orange\" | \"blue\";\n\ntype Rows = {\n    rows: number\n    toSubmit: number\n}\n\nconst Cell : React.FC<CellProps> = ({row: number, width = 50, state = \"white\"} : CellProps) => {\n    return(\n        <div style={{\n            width: `${width}px`,\n            height: `${width}px`,\n            backgroundColor: state,\n            outline: \"solid\",\n            margin: \"1px\",\n        }}/>\n    )\n}\n\nexport default function Panel() {\n    const [grid, setGrid] = useState<JSX.Element[][]>();\n    const [rows, setRows] = useState<Rows>({rows: 50, toSubmit: 50});\n    const [width, setWidth] = useState<number>(10);\n\n    const options: string[] = [\n        \"A*\", \"BFS\", \"DFS\"\n    ]\n\n    useEffect(() => {\n        makeNewGrid(rows.rows, width);\n    }, [])\n\n    const makeNewGrid = (rows: number, width: number) => {\n        let tempOut : JSX.Element[][] = [];\n\n        for (let j = 0; j < rows; j++) {\n            let tempIn : JSX.Element[] = [];\n            for (let i = 0; i < rows; i++) {\n                tempIn.push(<Cell row={j} width={width} state={\"white\"} key={i}/>)\n            }\n            tempOut.push(tempIn);\n        }\n\n        setGrid(tempOut)\n    }\n\n    const changeRows = (newRows: string) => {\n        if (isNaN(Number(newRows))) return;\n        setRows({rows: rows.rows, toSubmit: Number(newRows)})\n    }\n\n    return(\n        <div className=\"panel\">\n            <div className=\"options\">\n                <input \n                    value={rows.toSubmit} \n                    onChange={(event) => changeRows(event.target.value)}\n                    onKeyDown={(event) => {\n                        if (event.key === \"Enter\") {\n                            setRows({rows: rows.toSubmit, toSubmit: rows.toSubmit})\n                            makeNewGrid(rows.toSubmit, width)\n                        }\n                    }}\n                />\n                <input \n                    value={width} \n                    onChange={(event) => setWidth(Number(event.target.value))}\n                    onKeyDown={(event) => {\n                        if (event.key === \"Enter\") {\n                            setRows({rows: rows.toSubmit, toSubmit: rows.toSubmit})\n                            makeNewGrid(rows.toSubmit, width)\n                        }\n                    }}\n                />\n                <select>\n\n                </select>\n            </div>\n            <div className=\"grid\">\n                <div style={{ display: 'grid', gridTemplateColumns: `repeat(${rows.rows}, 1fr)` }}>\n                    {grid?.map((cells) => {\n                        return cells.map((cell, i) => {\n                            return (\n                                <div key={i}>\n                                    <Cell \n                                        row={cell.props.row} \n                                        width={cell.props.width}\n                                        state={ i === 5 ? \"red\" : cell.props.state}\n                                    />\n                                </div>\n                            )\n                        })\n                    })}\n                </div>\n            </div>\n        </div>\n    );\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}