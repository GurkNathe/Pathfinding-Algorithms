{"ast":null,"code":"import { getNeighbors, reconstructPath } from \"./helper\";\nexport default function bfs(colorGrid, setGrid, endPoints) {\n  let grid = [...colorGrid];\n  let nodes = [];\n  nodes.push(endPoints.start);\n  let previous = {};\n  let found = false;\n  while (nodes.length > 0 && !found) {\n    let [i, j] = nodes.shift();\n    if (grid[i][j] === \"red\") {\n      continue;\n    }\n    if (grid[i][j] !== \"orange\") {\n      grid[i][j] = \"red\";\n    }\n    for (const neighbor of getNeighbors(grid, [i, j])) {\n      console.log(neighbor);\n      let [ni, nj] = neighbor;\n      let nColor = grid[ni][nj];\n      if (nColor !== \"red\") {\n        if (nColor === \"blue\") {\n          previous[`${ni}-${nj}`] = [i, j];\n          found = true;\n          reconstructPath(grid, previous, endPoints.end);\n          break;\n        } else {\n          previous[`${ni}-${nj}`] = [i, j];\n          nodes.push(neighbor);\n          if (nColor !== \"orange\") {\n            grid[ni][nj] = \"green\";\n          }\n        }\n      }\n    }\n    setGrid(grid);\n  }\n}","map":{"version":3,"names":["getNeighbors","reconstructPath","bfs","colorGrid","setGrid","endPoints","grid","nodes","push","start","previous","found","length","i","j","shift","neighbor","console","log","ni","nj","nColor","end"],"sources":["/home/krug/Coding/Python/Pathfinding-Algorithms/website/src/algorithms/bfs.ts"],"sourcesContent":["import { Interests, States } from \"../components/Panel\"\nimport { getNeighbors, reconstructPath } from \"./helper\";\n\nexport default function bfs(colorGrid: States[][], setGrid: React.Dispatch<React.SetStateAction<States[][]>>, endPoints: Interests) {\n    let grid = [...colorGrid];\n    let nodes: [number, number][] = [];\n    nodes.push(endPoints.start)\n\n    let previous : any = {};\n\n    let found : boolean = false;\n    while (nodes.length > 0 && !found) {\n        let [i, j] = nodes.shift()!;\n\n        if (grid[i][j] === \"red\") {\n            continue;\n        }\n\n        if (grid[i][j] !== \"orange\") {\n            grid[i][j] = \"red\";\n        }\n\n        for (const neighbor of getNeighbors(grid, [i,j])) {\n            console.log(neighbor)\n            let [ni, nj] = neighbor;\n            let nColor : States = grid[ni][nj];\n            if (nColor !== \"red\") {\n                if (nColor === \"blue\") {\n                    previous[`${ni}-${nj}`] = [i,j];\n                    found = true;\n                    reconstructPath(grid, previous, endPoints.end);\n                    break;\n                } else {\n                    previous[`${ni}-${nj}`] = [i,j];\n                    nodes.push(neighbor);\n                    \n                    if (nColor !== \"orange\") {\n                        grid[ni][nj] = \"green\";\n                    }\n                }\n            }\n        }\n\n        setGrid(grid);\n    }\n}"],"mappings":"AACA,SAASA,YAAY,EAAEC,eAAe,QAAQ,UAAU;AAExD,eAAe,SAASC,GAAGA,CAACC,SAAqB,EAAEC,OAAyD,EAAEC,SAAoB,EAAE;EAChI,IAAIC,IAAI,GAAG,CAAC,GAAGH,SAAS,CAAC;EACzB,IAAII,KAAyB,GAAG,EAAE;EAClCA,KAAK,CAACC,IAAI,CAACH,SAAS,CAACI,KAAK,CAAC;EAE3B,IAAIC,QAAc,GAAG,CAAC,CAAC;EAEvB,IAAIC,KAAe,GAAG,KAAK;EAC3B,OAAOJ,KAAK,CAACK,MAAM,GAAG,CAAC,IAAI,CAACD,KAAK,EAAE;IAC/B,IAAI,CAACE,CAAC,EAAEC,CAAC,CAAC,GAAGP,KAAK,CAACQ,KAAK,CAAC,CAAE;IAE3B,IAAIT,IAAI,CAACO,CAAC,CAAC,CAACC,CAAC,CAAC,KAAK,KAAK,EAAE;MACtB;IACJ;IAEA,IAAIR,IAAI,CAACO,CAAC,CAAC,CAACC,CAAC,CAAC,KAAK,QAAQ,EAAE;MACzBR,IAAI,CAACO,CAAC,CAAC,CAACC,CAAC,CAAC,GAAG,KAAK;IACtB;IAEA,KAAK,MAAME,QAAQ,IAAIhB,YAAY,CAACM,IAAI,EAAE,CAACO,CAAC,EAACC,CAAC,CAAC,CAAC,EAAE;MAC9CG,OAAO,CAACC,GAAG,CAACF,QAAQ,CAAC;MACrB,IAAI,CAACG,EAAE,EAAEC,EAAE,CAAC,GAAGJ,QAAQ;MACvB,IAAIK,MAAe,GAAGf,IAAI,CAACa,EAAE,CAAC,CAACC,EAAE,CAAC;MAClC,IAAIC,MAAM,KAAK,KAAK,EAAE;QAClB,IAAIA,MAAM,KAAK,MAAM,EAAE;UACnBX,QAAQ,CAAE,GAAES,EAAG,IAAGC,EAAG,EAAC,CAAC,GAAG,CAACP,CAAC,EAACC,CAAC,CAAC;UAC/BH,KAAK,GAAG,IAAI;UACZV,eAAe,CAACK,IAAI,EAAEI,QAAQ,EAAEL,SAAS,CAACiB,GAAG,CAAC;UAC9C;QACJ,CAAC,MAAM;UACHZ,QAAQ,CAAE,GAAES,EAAG,IAAGC,EAAG,EAAC,CAAC,GAAG,CAACP,CAAC,EAACC,CAAC,CAAC;UAC/BP,KAAK,CAACC,IAAI,CAACQ,QAAQ,CAAC;UAEpB,IAAIK,MAAM,KAAK,QAAQ,EAAE;YACrBf,IAAI,CAACa,EAAE,CAAC,CAACC,EAAE,CAAC,GAAG,OAAO;UAC1B;QACJ;MACJ;IACJ;IAEAhB,OAAO,CAACE,IAAI,CAAC;EACjB;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}