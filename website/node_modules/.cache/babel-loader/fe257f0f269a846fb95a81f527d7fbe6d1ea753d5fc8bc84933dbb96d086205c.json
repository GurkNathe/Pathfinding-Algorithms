{"ast":null,"code":"var _jsxFileName = \"/home/krug/Coding/Python/Pathfinding-Algorithms/website/src/components/Panel.tsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { Cell } from \"./Cell\";\nimport \"../css/panel.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Panel() {\n  _s();\n  const [grid, setGrid] = useState();\n  const [rows, setRows] = useState({\n    rows: 50,\n    toSubmit: 50\n  });\n  const [width, setWidth] = useState(10);\n  const algorithms = [\"A*\", \"Beam Search\", \"Bellman-Ford\", \"Best First Search\", \"BFS\", \"DFS\", \"Dijkstra\", \"Floyd-Warshall\", \"Greedy Best First Search\", \"Greedy Best Line Search\", \"Iterative Deepening A*\", \"Iterative Deepening DFS\", \"Jump Point Search\", \"Lexicographic BFS\", \"Lifelong Planning A*\", \"Random Search\", \"Theta*\"];\n  useEffect(() => {\n    makeNewGrid(rows.rows, width);\n  }, []);\n  const makeNewGrid = (rows, width) => {\n    let tempOut = [];\n    for (let j = 0; j < rows; j++) {\n      let tempIn = [];\n      for (let i = 0; i < rows; i++) {\n        tempIn.push( /*#__PURE__*/_jsxDEV(Cell, {\n          row: j,\n          col: i,\n          width: width,\n          state: \"white\"\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 21\n        }, this));\n      }\n      tempOut.push(tempIn);\n    }\n    setGrid(() => [...tempOut]);\n  };\n  const clearGrid = () => {\n    let tempGrid = grid;\n    grid === null || grid === void 0 ? void 0 : grid.forEach(row => {\n      row.forEach(cell => {\n        cell;\n      });\n    });\n  };\n  const changeRows = newRows => {\n    if (isNaN(Number(newRows))) return;\n    setRows({\n      rows: rows.rows,\n      toSubmit: Number(newRows)\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"panel\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"options\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"Rows: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          value: rows.toSubmit,\n          onChange: event => changeRows(event.target.value),\n          onKeyDown: event => {\n            if (event.key === \"Enter\") {\n              setRows({\n                rows: rows.toSubmit,\n                toSubmit: rows.toSubmit\n              });\n              makeNewGrid(rows.toSubmit, width);\n            }\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"Cell Width: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          value: width,\n          onChange: event => setWidth(Number(event.target.value)),\n          onKeyDown: event => {\n            if (event.key === \"Enter\") {\n              setRows({\n                rows: rows.toSubmit,\n                toSubmit: rows.toSubmit\n              });\n              makeNewGrid(rows.toSubmit, width);\n            }\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"Algorithm: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          children: algorithms.map((func, index) => {\n            return /*#__PURE__*/_jsxDEV(\"option\", {\n              value: func,\n              children: func\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 112,\n              columnNumber: 36\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Generate Maze\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => makeNewGrid(rows.rows, width),\n        children: \"Clear Grid\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Run\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Stop\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid\",\n      onDragStart: e => e.preventDefault(),\n      onDrop: e => e.preventDefault(),\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'grid',\n          gridTemplateColumns: `repeat(${rows.rows}, 1fr)`\n        },\n        children: grid === null || grid === void 0 ? void 0 : grid.map(cells => {\n          return cells.map((cell, i) => {\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              children: cell\n            }, i, false, {\n              fileName: _jsxFileName,\n              lineNumber: 126,\n              columnNumber: 33\n            }, this);\n          });\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 9\n  }, this);\n}\n_s(Panel, \"jskikpJiYXJG7rOtmPZVcgHI5z4=\");\n_c = Panel;\nvar _c;\n$RefreshReg$(_c, \"Panel\");","map":{"version":3,"names":["useEffect","useState","Cell","jsxDEV","_jsxDEV","Panel","_s","grid","setGrid","rows","setRows","toSubmit","width","setWidth","algorithms","makeNewGrid","tempOut","j","tempIn","i","push","row","col","state","fileName","_jsxFileName","lineNumber","columnNumber","clearGrid","tempGrid","forEach","cell","changeRows","newRows","isNaN","Number","className","children","value","onChange","event","target","onKeyDown","key","map","func","index","onClick","onDragStart","e","preventDefault","onDrop","style","display","gridTemplateColumns","cells","_c","$RefreshReg$"],"sources":["/home/krug/Coding/Python/Pathfinding-Algorithms/website/src/components/Panel.tsx"],"sourcesContent":["import { useEffect, useState } from \"react\";\n\nimport { Cell } from \"./Cell\"\n\nimport \"../css/panel.css\"\n\ntype Rows = {\n    rows: number\n    toSubmit: number\n}\n\nexport default function Panel() {\n    const [grid, setGrid] = useState<JSX.Element[][]>();\n    const [rows, setRows] = useState<Rows>({rows: 50, toSubmit: 50});\n    const [width, setWidth] = useState<number>(10);\n\n    const algorithms: string[] = [\n        \"A*\", \n        \"Beam Search\",\n        \"Bellman-Ford\",\n        \"Best First Search\",\n        \"BFS\", \n        \"DFS\",\n        \"Dijkstra\",\n        \"Floyd-Warshall\",\n        \"Greedy Best First Search\",\n        \"Greedy Best Line Search\",\n        \"Iterative Deepening A*\",\n        \"Iterative Deepening DFS\",\n        \"Jump Point Search\",\n        \"Lexicographic BFS\",\n        \"Lifelong Planning A*\",\n        \"Random Search\",\n        \"Theta*\",\n    ]\n    \n\n    useEffect(() => {\n        makeNewGrid(rows.rows, width);\n    }, [])\n\n    const makeNewGrid = (rows: number, width: number) => {\n        let tempOut : JSX.Element[][] = [];\n\n        for (let j = 0; j < rows; j++) {\n            let tempIn : JSX.Element[] = [];\n            for (let i = 0; i < rows; i++) {\n                tempIn.push(\n                    <Cell \n                        row={j} \n                        col={i} \n                        width={width} \n                        state={\"white\"} \n                        key={i}\n                    />\n                );\n            }\n            tempOut.push(tempIn);\n        }\n\n        setGrid(() => [...tempOut])\n    }\n\n    const clearGrid = () => {\n        let tempGrid = grid;\n\n        grid?.forEach((row) => {\n            row.forEach((cell) => {\n                cell\n            })\n        })\n    }\n\n    const changeRows = (newRows: string) => {\n        if (isNaN(Number(newRows))) return;\n        setRows({rows: rows.rows, toSubmit: Number(newRows)})\n    }\n\n    return(\n        <div className=\"panel\">\n            <div className=\"options\">\n                <div>\n                    <span>Rows: </span>\n                    <input \n                        value={rows.toSubmit} \n                        onChange={(event) => changeRows(event.target.value)}\n                        onKeyDown={(event) => {\n                            if (event.key === \"Enter\") {\n                                setRows({rows: rows.toSubmit, toSubmit: rows.toSubmit})\n                                makeNewGrid(rows.toSubmit, width)\n                            }\n                        }}\n                    />\n                </div>\n                <div>\n                    <span>Cell Width: </span>\n                    <input \n                        value={width} \n                        onChange={(event) => setWidth(Number(event.target.value))}\n                        onKeyDown={(event) => {\n                            if (event.key === \"Enter\") {\n                                setRows({rows: rows.toSubmit, toSubmit: rows.toSubmit})\n                                makeNewGrid(rows.toSubmit, width)\n                            }\n                        }}\n                    />\n                </div>\n                <div>\n                    <span>Algorithm: </span>\n                    <select>\n                        {algorithms.map((func, index) => {\n                            return <option value={func} key={index}>{func}</option>\n                        })}\n                    </select>\n                </div>\n                <button>Generate Maze</button>\n                <button onClick={() => makeNewGrid(rows.rows, width)}>Clear Grid</button>\n                <button>Run</button>\n                <button>Stop</button>\n            </div>\n            <div className=\"grid\" onDragStart={(e)=>e.preventDefault()} onDrop={(e)=>e.preventDefault()}>\n                <div style={{ display: 'grid', gridTemplateColumns: `repeat(${rows.rows}, 1fr)` }}>\n                    {grid?.map((cells) => {\n                        return cells.map((cell, i) => {\n                            return (\n                                <div key={i}>\n                                    {cell}\n                                </div>\n                            )\n                        })\n                    })}\n                </div>\n            </div>\n        </div>\n    );\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}