{"ast":null,"code":"import { PriorityQueue, getNeighbors, heuristic, reconstructPath } from \"./helper\";\nexport default function beamsearch(colorGrid, setGrid, endPoints) {\n  let grid = [...colorGrid];\n  let beam = new PriorityQueue();\n  let beamsize = 50;\n  beam.enqueue(endPoints.start, 0, 0);\n  let previous = {};\n  while (beam.size() > 0) {\n    let [y, x] = beam.dequeue();\n    if (grid[y][x] === \"blue\") {\n      reconstructPath(grid, previous, [y, x]);\n      break;\n    }\n    if (grid[y][x] !== \"orange\") {\n      grid[y][x] = \"red\";\n    }\n    let children = getNeighbors(grid, [y, x]);\n    children = children.filter(e => {\n      return !(e[0] === previous[`${y}-${x}`][0] && e[1] === previous[`${y}-${x}`][1]);\n    });\n    for (const child of children) {\n      let [cy, cx] = child;\n      if (grid[cy][cx] !== \"red\") {\n        previous[`${cy}-${cx}`] = [y, x];\n        beam.enqueue(child, heuristic(\"manhattan\", grid, child, endPoints.end), 0);\n        if (grid[cy][cx] !== \"orange\" && grid[cy][cx] !== \"blue\") {\n          grid[cy][cx] = \"green\";\n        }\n      }\n    }\n    beam.resize(beamsize);\n  }\n}","map":{"version":3,"names":["PriorityQueue","getNeighbors","heuristic","reconstructPath","beamsearch","colorGrid","setGrid","endPoints","grid","beam","beamsize","enqueue","start","previous","size","y","x","dequeue","children","filter","e","child","cy","cx","end","resize"],"sources":["/home/krug/Coding/Python/Pathfinding-Algorithms/website/src/algorithms/beamsearch.ts"],"sourcesContent":["import { Interests, States } from \"../components/Panel\"\nimport { PriorityQueue, getNeighbors, heuristic, reconstructPath } from \"./helper\";\n\nexport default function beamsearch(colorGrid: States[][], setGrid: React.Dispatch<React.SetStateAction<States[][]>>, endPoints: Interests) {\n    let grid: States[][] = [...colorGrid];\n    let beam = new PriorityQueue();\n    let beamsize = 50;\n    beam.enqueue(endPoints.start, 0, 0);\n\n    let previous: any = {};\n\n    while (beam.size() > 0) {\n        let [y, x] = beam.dequeue();\n\n        if (grid[y][x] === \"blue\") {\n            reconstructPath(grid, previous, [y, x]);\n            break;\n        }\n\n        if (grid[y][x] !== \"orange\") {\n            grid[y][x] = \"red\";\n        }\n\n        let children = getNeighbors(grid, [y, x]);\n        children = children.filter((e) => {\n            return !(e[0] === previous[`${y}-${x}`][0] && e[1] === previous[`${y}-${x}`][1]);\n        })\n\n        for (const child of children) {\n            let [cy, cx] = child;\n\n            if (grid[cy][cx] !== \"red\") {\n                previous[`${cy}-${cx}`] = [y, x];\n                beam.enqueue(child, heuristic(\"manhattan\", grid, child, endPoints.end), 0);\n\n                if (grid[cy][cx] !== \"orange\" && grid[cy][cx] !== \"blue\") {\n                    grid[cy][cx] = \"green\";\n                }\n            }\n        }\n\n        beam.resize(beamsize)\n    }\n}"],"mappings":"AACA,SAASA,aAAa,EAAEC,YAAY,EAAEC,SAAS,EAAEC,eAAe,QAAQ,UAAU;AAElF,eAAe,SAASC,UAAUA,CAACC,SAAqB,EAAEC,OAAyD,EAAEC,SAAoB,EAAE;EACvI,IAAIC,IAAgB,GAAG,CAAC,GAAGH,SAAS,CAAC;EACrC,IAAII,IAAI,GAAG,IAAIT,aAAa,CAAC,CAAC;EAC9B,IAAIU,QAAQ,GAAG,EAAE;EACjBD,IAAI,CAACE,OAAO,CAACJ,SAAS,CAACK,KAAK,EAAE,CAAC,EAAE,CAAC,CAAC;EAEnC,IAAIC,QAAa,GAAG,CAAC,CAAC;EAEtB,OAAOJ,IAAI,CAACK,IAAI,CAAC,CAAC,GAAG,CAAC,EAAE;IACpB,IAAI,CAACC,CAAC,EAAEC,CAAC,CAAC,GAAGP,IAAI,CAACQ,OAAO,CAAC,CAAC;IAE3B,IAAIT,IAAI,CAACO,CAAC,CAAC,CAACC,CAAC,CAAC,KAAK,MAAM,EAAE;MACvBb,eAAe,CAACK,IAAI,EAAEK,QAAQ,EAAE,CAACE,CAAC,EAAEC,CAAC,CAAC,CAAC;MACvC;IACJ;IAEA,IAAIR,IAAI,CAACO,CAAC,CAAC,CAACC,CAAC,CAAC,KAAK,QAAQ,EAAE;MACzBR,IAAI,CAACO,CAAC,CAAC,CAACC,CAAC,CAAC,GAAG,KAAK;IACtB;IAEA,IAAIE,QAAQ,GAAGjB,YAAY,CAACO,IAAI,EAAE,CAACO,CAAC,EAAEC,CAAC,CAAC,CAAC;IACzCE,QAAQ,GAAGA,QAAQ,CAACC,MAAM,CAAEC,CAAC,IAAK;MAC9B,OAAO,EAAEA,CAAC,CAAC,CAAC,CAAC,KAAKP,QAAQ,CAAE,GAAEE,CAAE,IAAGC,CAAE,EAAC,CAAC,CAAC,CAAC,CAAC,IAAII,CAAC,CAAC,CAAC,CAAC,KAAKP,QAAQ,CAAE,GAAEE,CAAE,IAAGC,CAAE,EAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACpF,CAAC,CAAC;IAEF,KAAK,MAAMK,KAAK,IAAIH,QAAQ,EAAE;MAC1B,IAAI,CAACI,EAAE,EAAEC,EAAE,CAAC,GAAGF,KAAK;MAEpB,IAAIb,IAAI,CAACc,EAAE,CAAC,CAACC,EAAE,CAAC,KAAK,KAAK,EAAE;QACxBV,QAAQ,CAAE,GAAES,EAAG,IAAGC,EAAG,EAAC,CAAC,GAAG,CAACR,CAAC,EAAEC,CAAC,CAAC;QAChCP,IAAI,CAACE,OAAO,CAACU,KAAK,EAAEnB,SAAS,CAAC,WAAW,EAAEM,IAAI,EAAEa,KAAK,EAAEd,SAAS,CAACiB,GAAG,CAAC,EAAE,CAAC,CAAC;QAE1E,IAAIhB,IAAI,CAACc,EAAE,CAAC,CAACC,EAAE,CAAC,KAAK,QAAQ,IAAIf,IAAI,CAACc,EAAE,CAAC,CAACC,EAAE,CAAC,KAAK,MAAM,EAAE;UACtDf,IAAI,CAACc,EAAE,CAAC,CAACC,EAAE,CAAC,GAAG,OAAO;QAC1B;MACJ;IACJ;IAEAd,IAAI,CAACgB,MAAM,CAACf,QAAQ,CAAC;EACzB;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}