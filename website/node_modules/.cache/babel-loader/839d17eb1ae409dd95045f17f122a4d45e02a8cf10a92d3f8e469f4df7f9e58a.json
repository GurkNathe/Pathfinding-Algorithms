{"ast":null,"code":"var _jsxFileName = \"/home/krug/Coding/Python/Pathfinding-Algorithms/website/src/components/Panel.tsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport \"../css/panel.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Cell = _ref => {\n  let {\n    row: number,\n    width = 50,\n    state = \"gray\"\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: `${width}px`,\n      height: `${width}px`,\n      backgroundColor: state,\n      margin: \"1px\"\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 9\n  }, this);\n};\n_c = Cell;\nexport default function Panel() {\n  _s();\n  const [grid, setGrid] = useState();\n  const [rows, setRows] = useState(71);\n  useEffect(() => {\n    let tempOut = [];\n    for (let j = 0; j < rows; j++) {\n      let tempIn = [];\n      for (let i = 0; i < rows; i++) {\n        tempIn.push( /*#__PURE__*/_jsxDEV(Cell, {\n          row: j,\n          width: 10,\n          state: \"gray\"\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 29\n        }, this));\n      }\n      tempOut.push(tempIn);\n    }\n    setGrid(tempOut);\n  }, []);\n  const makeGrid = rows => {\n    let tempOut = [];\n    for (let j = 0; j < rows; j++) {\n      let tempIn = [];\n      for (let i = 0; i < rows; i++) {\n        tempIn.push( /*#__PURE__*/_jsxDEV(Cell, {\n          row: j,\n          width: 10,\n          state: \"gray\"\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 29\n        }, this));\n      }\n      tempOut.push(tempIn);\n    }\n    setGrid(tempOut);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"panel\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"options\",\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        value: rows | 0,\n        onChange: event => console.log(x)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'grid',\n          gridTemplateColumns: `repeat(${rows}, 1fr)`\n        },\n        children: grid === null || grid === void 0 ? void 0 : grid.map(cells => {\n          return cells.map((cell, i) => {\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              children: /*#__PURE__*/_jsxDEV(Cell, {\n                row: cell.props.row,\n                width: cell.props.width,\n                state: i === 5 ? \"red\" : cell.props.state\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 65,\n                columnNumber: 37\n              }, this)\n            }, i, false, {\n              fileName: _jsxFileName,\n              lineNumber: 64,\n              columnNumber: 33\n            }, this);\n          });\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 9\n  }, this);\n}\n_s(Panel, \"Tv3Q+VNJ00TVNU6/zN0PlTdB0uw=\");\n_c2 = Panel;\nvar _c, _c2;\n$RefreshReg$(_c, \"Cell\");\n$RefreshReg$(_c2, \"Panel\");","map":{"version":3,"names":["useEffect","useState","jsxDEV","_jsxDEV","Cell","_ref","row","number","width","state","style","height","backgroundColor","margin","fileName","_jsxFileName","lineNumber","columnNumber","_c","Panel","_s","grid","setGrid","rows","setRows","tempOut","j","tempIn","i","push","makeGrid","className","children","value","onChange","event","console","log","x","display","gridTemplateColumns","map","cells","cell","props","_c2","$RefreshReg$"],"sources":["/home/krug/Coding/Python/Pathfinding-Algorithms/website/src/components/Panel.tsx"],"sourcesContent":["import { useEffect, useState } from \"react\";\n\nimport \"../css/panel.css\"\n\ntype CellProps = {\n    row: number\n    width: number\n    state: States\n}\n\ntype States = \"gray\" | \"red\" | \"green\" | \"orange\" | \"blue\";\n\nconst Cell : React.FC<CellProps> = ({row: number, width = 50, state = \"gray\"} : CellProps) => {\n    return(\n        <div style={{\n            width: `${width}px`,\n            height: `${width}px`,\n            backgroundColor: state,\n            margin: \"1px\",\n        }}/>\n    )\n}\n\nexport default function Panel() {\n    const [grid, setGrid] = useState<JSX.Element[][]>();\n    const [rows, setRows] = useState<number>(71);\n\n    useEffect(() => {\n        let tempOut : JSX.Element[][] = [];\n        for (let j = 0; j < rows; j++) {\n            let tempIn : JSX.Element[] = [];\n            for (let i = 0; i < rows; i++) {\n                tempIn.push(<Cell row={j} width={10} state={\"gray\"} key={i}/>)\n            }\n            tempOut.push(tempIn);\n        }\n        setGrid(tempOut)\n    }, [])\n\n    const makeGrid = (rows: number) => {\n        let tempOut : JSX.Element[][] = [];\n\n        for (let j = 0; j < rows; j++) {\n            let tempIn : JSX.Element[] = [];\n            for (let i = 0; i < rows; i++) {\n                tempIn.push(<Cell row={j} width={10} state={\"gray\"} key={i}/>)\n            }\n            tempOut.push(tempIn);\n        }\n\n        setGrid(tempOut)\n    }\n\n    return(\n        <div className=\"panel\">\n            <div className=\"options\">\n                <input value={rows | 0} onChange={(event) => console.log(x)}></input>\n            </div>\n            <div className=\"grid\">\n                <div style={{ display: 'grid', gridTemplateColumns: `repeat(${rows}, 1fr)` }}>\n                    {grid?.map((cells) => {\n                        return cells.map((cell, i) => {\n                            return (\n                                <div key={i}>\n                                    <Cell \n                                        row={cell.props.row} \n                                        width={cell.props.width}\n                                        state={ i === 5 ? \"red\" : cell.props.state}\n                                    />\n                                </div>\n                            )\n                        })\n                    })}\n                </div>\n            </div>\n        </div>\n    );\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}