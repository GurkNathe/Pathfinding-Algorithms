{"ast":null,"code":"export function getNeighbors(grid, pos) {\n  let [i, j] = pos;\n  let neighbors = [];\n  if (i - 1 >= 0 && grid[i - 1][j] !== \"black\") {\n    neighbors.push([i - 1, j]);\n  }\n  if (j - 1 >= 0 && grid[i][j - 1] !== \"black\") {\n    neighbors.push([i, j - 1]);\n  }\n  if (i + 1 < grid.length && grid[i + 1][j] !== \"black\") {\n    neighbors.push([i + 1, j]);\n  }\n  if (j + 1 < grid[0].length && grid[i][j + 1] !== \"black\") {\n    neighbors.push([i, j + 1]);\n  }\n  return neighbors;\n}\nexport function reconstructPath(grid, path, current) {\n  while (path.hasOwnProperty(`${current[0]}-${current[1]}`)) {\n    if (grid[current[0]][current[1]] !== \"orange\") {\n      current = path[`${current[0]}-${current[1]}`];\n      if (grid[current[0]][current[1]] !== \"orange\") {\n        grid[current[0]][current[1]] = \"purple\";\n      }\n    } else {\n      break;\n    }\n  }\n}\n\n// User defined class to store elements and their priorities\nclass QElement {\n  constructor(element, priority, count) {\n    this.element = void 0;\n    this.priority = void 0;\n    this.count = void 0;\n    this.element = element;\n    this.priority = priority;\n    this.count = count;\n  }\n}\n\n// PriorityQueue class\nexport class PriorityQueue {\n  constructor() {\n    this.items = void 0;\n    this.items = [];\n  }\n  enqueue(element, priority, count) {\n    const qElement = new QElement(element, priority, count);\n    let contain = false;\n\n    // Iterate through the entire array to add the element at the correct position based on priority\n    for (let i = 0; i < this.items.length; i++) {\n      if (this.items[i].priority > qElement.priority) {\n        this.items.splice(i, 0, qElement);\n        contain = true;\n        break;\n      }\n    }\n\n    // If the element has the highest priority, add it to the end of the array\n    if (!contain) {\n      this.items.push(qElement);\n    }\n  }\n  dequeue() {\n    // If the priority queue is empty, return \"No elements in Queue\"\n    if (this.isEmpty()) {\n      return \"No elements in Queue\";\n    }\n\n    // Remove and return the first element from the array, as it has the highest priority\n    return this.items.shift().element;\n  }\n  front() {\n    // If the priority queue is empty, return \"No elements in Queue\"\n    if (this.isEmpty()) {\n      return \"No elements in Queue\";\n    }\n\n    // Return the element with the highest priority without removing it\n    return this.items[0].element;\n  }\n  rear() {\n    // If the priority queue is empty, return \"No elements in Queue\"\n    if (this.isEmpty()) {\n      return \"No elements in Queue\";\n    }\n\n    // Return the element with the lowest priority\n    return this.items[this.items.length - 1].element;\n  }\n  isEmpty() {\n    // Return true if the priority queue is empty\n    return this.items.length === 0;\n  }\n  printPQueue() {\n    let str = \"\";\n    for (let i = 0; i < this.items.length; i++) {\n      str += this.items[i].element + \" \";\n    }\n    return str;\n  }\n}","map":{"version":3,"names":["getNeighbors","grid","pos","i","j","neighbors","push","length","reconstructPath","path","current","hasOwnProperty","QElement","constructor","element","priority","count","PriorityQueue","items","enqueue","qElement","contain","splice","dequeue","isEmpty","shift","front","rear","printPQueue","str"],"sources":["/home/krug/Coding/Python/Pathfinding-Algorithms/website/src/algorithms/helper.ts"],"sourcesContent":["import { States } from \"../components/Panel\";\n\nexport function getNeighbors(grid: States[][], pos: [number, number]) {\n    let [i, j] = pos;\n\n    let neighbors : [number, number][] = [];\n\n    if (i - 1 >= 0 && grid[i - 1][j] !== \"black\") {\n        neighbors.push([i - 1, j]);\n    }\n    if (j - 1 >= 0 && grid[i][j - 1] !== \"black\") {\n        neighbors.push([i, j - 1]);\n    }\n    if (i + 1 < grid.length && grid[i + 1][j] !== \"black\") {\n        neighbors.push([i + 1, j]);\n    }\n    if (j + 1 < grid[0].length && grid[i][j + 1] !== \"black\") {\n        neighbors.push([i, j + 1]);\n    }\n\n    return neighbors;\n}\n\nexport function reconstructPath(grid: States[][], path: any, current: [number, number])  {\n    while (path.hasOwnProperty(`${current[0]}-${current[1]}`)) {\n        if (grid[current[0]][current[1]] !== \"orange\") {\n            current = path[`${current[0]}-${current[1]}`]\n            if (grid[current[0]][current[1]] !== \"orange\") {\n                grid[current[0]][current[1]] = \"purple\";\n            }\n        } else {\n            break;\n        }\n    }\n}\n\n// User defined class to store elements and their priorities\nclass QElement {\n    element: any;\n    priority: number;\n    count: number;\n\n    constructor(element : any, priority: number, count: number) {\n        this.element = element;\n        this.priority = priority;\n        this.count = count;\n    }\n}\n\n// PriorityQueue class\nexport class PriorityQueue {\n    items: any[];\n\n    constructor() {\n        this.items = [];\n    }\n\n    enqueue(element: any, priority: number, count: number) {\n        const qElement = new QElement(element, priority, count);\n        let contain = false;\n\n        // Iterate through the entire array to add the element at the correct position based on priority\n        for (let i = 0; i < this.items.length; i++) {\n        if (this.items[i].priority > qElement.priority) {\n            this.items.splice(i, 0, qElement);\n            contain = true;\n            break;\n        }\n        }\n\n        // If the element has the highest priority, add it to the end of the array\n        if (!contain) {\n        this.items.push(qElement);\n        }\n    }\n\n    dequeue() {\n        // If the priority queue is empty, return \"No elements in Queue\"\n        if (this.isEmpty()) {\n        return \"No elements in Queue\";\n        }\n        \n        // Remove and return the first element from the array, as it has the highest priority\n        return this.items.shift().element;\n    }\n\n    front() {\n        // If the priority queue is empty, return \"No elements in Queue\"\n        if (this.isEmpty()) {\n        return \"No elements in Queue\";\n        }\n        \n        // Return the element with the highest priority without removing it\n        return this.items[0].element;\n    }\n\n    rear() {\n        // If the priority queue is empty, return \"No elements in Queue\"\n        if (this.isEmpty()) {\n        return \"No elements in Queue\";\n        }\n        \n        // Return the element with the lowest priority\n        return this.items[this.items.length - 1].element;\n    }\n\n    isEmpty() {\n        // Return true if the priority queue is empty\n        return this.items.length === 0;\n    }\n\n    printPQueue() {\n        let str = \"\";\n        for (let i = 0; i < this.items.length; i++) {\n        str += this.items[i].element + \" \";\n        }\n        return str;\n    }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}