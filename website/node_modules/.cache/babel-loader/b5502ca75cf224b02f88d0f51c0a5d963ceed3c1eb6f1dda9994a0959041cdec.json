{"ast":null,"code":"var _jsxFileName = \"/home/krug/Coding/Python/Pathfinding-Algorithms/website/src/components/Panel.tsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { Cell } from \"./Cell\";\nimport \"../css/panel.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Panel() {\n  _s();\n  const [grid, setGrid] = useState();\n  const [colorGrid, setColorGrid] = useState();\n  const [rows, setRows] = useState({\n    rows: 50,\n    toSubmit: 50\n  });\n  const [width, setWidth] = useState(10);\n  const algorithms = [\"A*\", \"Beam Search\", \"Bellman-Ford\", \"Best First Search\", \"BFS\", \"DFS\", \"Dijkstra\", \"Floyd-Warshall\", \"Greedy Best First Search\", \"Greedy Best Line Search\", \"Iterative Deepening A*\", \"Iterative Deepening DFS\", \"Jump Point Search\", \"Lexicographic BFS\", \"Lifelong Planning A*\", \"Random Search\", \"Theta*\"];\n  useEffect(() => {\n    makeNewGrid(rows.rows, width);\n  }, []);\n  const makeNewGrid = (rows, width) => {\n    let tempOut = [];\n    let tempColorRows = [];\n    for (let j = 0; j < rows; j++) {\n      let tempIn = [];\n      let tempColorRow = [];\n      for (let i = 0; i < rows; i++) {\n        tempIn.push( /*#__PURE__*/_jsxDEV(Cell, {\n          width: width,\n          state: \"white\"\n        }, `${j}-${i}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 21\n        }, this));\n        tempColorRow.push(\"white\");\n      }\n      tempOut.push(tempIn);\n      tempColorRows.push(tempColorRow);\n    }\n    setGrid([...tempOut]);\n    setColorGrid([...tempColorRows]);\n    console.log(colorGrid);\n  };\n  const changeRows = newRows => {\n    if (isNaN(Number(newRows))) return;\n    setRows({\n      rows: rows.rows,\n      toSubmit: Number(newRows)\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"panel\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"options\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"Rows: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          value: rows.toSubmit,\n          onChange: event => changeRows(event.target.value),\n          onKeyDown: event => {\n            if (event.key === \"Enter\") {\n              setRows({\n                rows: rows.toSubmit,\n                toSubmit: rows.toSubmit\n              });\n              makeNewGrid(rows.toSubmit, width);\n            }\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"Cell Width: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          value: width,\n          onChange: event => setWidth(Number(event.target.value)),\n          onKeyDown: event => {\n            if (event.key === \"Enter\") {\n              setRows({\n                rows: rows.toSubmit,\n                toSubmit: rows.toSubmit\n              });\n              makeNewGrid(rows.toSubmit, width);\n            }\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"Algorithm: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          children: algorithms.map((func, index) => {\n            return /*#__PURE__*/_jsxDEV(\"option\", {\n              value: func,\n              children: func\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 107,\n              columnNumber: 36\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Generate Maze\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => makeNewGrid(rows.rows, width),\n        children: \"Clear Grid\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Run\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Stop\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid\",\n      onDragStart: e => e.preventDefault(),\n      onDrop: e => e.preventDefault(),\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'grid',\n          gridTemplateColumns: `repeat(${rows.rows}, 1fr)`\n        },\n        children: colorGrid === null || colorGrid === void 0 ? void 0 : colorGrid.map((colors, j) => {\n          return colors.map((color, i) => {\n            return /*#__PURE__*/_jsxDEV(Cell, {\n              width: width,\n              state: color\n            }, `${i}-${j}!`, false, {\n              fileName: _jsxFileName,\n              lineNumber: 130,\n              columnNumber: 33\n            }, this);\n          });\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 9\n  }, this);\n}\n_s(Panel, \"prSMKhf5zipQsFIY15/I275myTY=\");\n_c = Panel;\nvar _c;\n$RefreshReg$(_c, \"Panel\");","map":{"version":3,"names":["useEffect","useState","Cell","jsxDEV","_jsxDEV","Panel","_s","grid","setGrid","colorGrid","setColorGrid","rows","setRows","toSubmit","width","setWidth","algorithms","makeNewGrid","tempOut","tempColorRows","j","tempIn","tempColorRow","i","push","state","fileName","_jsxFileName","lineNumber","columnNumber","console","log","changeRows","newRows","isNaN","Number","className","children","value","onChange","event","target","onKeyDown","key","map","func","index","onClick","onDragStart","e","preventDefault","onDrop","style","display","gridTemplateColumns","colors","color","_c","$RefreshReg$"],"sources":["/home/krug/Coding/Python/Pathfinding-Algorithms/website/src/components/Panel.tsx"],"sourcesContent":["import { useEffect, useState } from \"react\";\n\nimport { Cell, States } from \"./Cell\"\n\nimport \"../css/panel.css\"\n\ntype Rows = {\n    rows: number\n    toSubmit: number\n}\n\nexport default function Panel() {\n    const [grid, setGrid] = useState<JSX.Element[][]>();\n    const [colorGrid, setColorGrid] = useState<States[][]>();\n    const [rows, setRows] = useState<Rows>({rows: 50, toSubmit: 50});\n    const [width, setWidth] = useState<number>(10);\n\n    const algorithms: string[] = [\n        \"A*\", \n        \"Beam Search\",\n        \"Bellman-Ford\",\n        \"Best First Search\",\n        \"BFS\", \n        \"DFS\",\n        \"Dijkstra\",\n        \"Floyd-Warshall\",\n        \"Greedy Best First Search\",\n        \"Greedy Best Line Search\",\n        \"Iterative Deepening A*\",\n        \"Iterative Deepening DFS\",\n        \"Jump Point Search\",\n        \"Lexicographic BFS\",\n        \"Lifelong Planning A*\",\n        \"Random Search\",\n        \"Theta*\",\n    ]\n    \n\n    useEffect(() => {\n        makeNewGrid(rows.rows, width);\n    }, [])\n\n    const makeNewGrid = (rows: number, width: number) => {\n        let tempOut : JSX.Element[][] = [];\n        let tempColorRows : States[][] = [];\n\n        for (let j = 0; j < rows; j++) {\n            let tempIn : JSX.Element[] = [];\n            let tempColorRow : States[] = []; \n            for (let i = 0; i < rows; i++) {\n                tempIn.push(\n                    <Cell \n                        width={width} \n                        state={\"white\"} \n                        key={`${j}-${i}`}\n                    />\n                );\n                tempColorRow.push(\"white\");\n            }\n            tempOut.push(tempIn);\n            tempColorRows.push(tempColorRow);\n        }\n\n        setGrid([...tempOut])\n        setColorGrid([...tempColorRows])\n        console.log(colorGrid)\n    }\n\n    const changeRows = (newRows: string) => {\n        if (isNaN(Number(newRows))) return;\n        setRows({rows: rows.rows, toSubmit: Number(newRows)})\n    }\n\n    return(\n        <div className=\"panel\">\n            <div className=\"options\">\n                <div>\n                    <span>Rows: </span>\n                    <input \n                        value={rows.toSubmit} \n                        onChange={(event) => changeRows(event.target.value)}\n                        onKeyDown={(event) => {\n                            if (event.key === \"Enter\") {\n                                setRows({rows: rows.toSubmit, toSubmit: rows.toSubmit})\n                                makeNewGrid(rows.toSubmit, width)\n                            }\n                        }}\n                    />\n                </div>\n                <div>\n                    <span>Cell Width: </span>\n                    <input \n                        value={width} \n                        onChange={(event) => setWidth(Number(event.target.value))}\n                        onKeyDown={(event) => {\n                            if (event.key === \"Enter\") {\n                                setRows({rows: rows.toSubmit, toSubmit: rows.toSubmit})\n                                makeNewGrid(rows.toSubmit, width)\n                            }\n                        }}\n                    />\n                </div>\n                <div>\n                    <span>Algorithm: </span>\n                    <select>\n                        {algorithms.map((func, index) => {\n                            return <option value={func} key={index}>{func}</option>\n                        })}\n                    </select>\n                </div>\n                <button>Generate Maze</button>\n                <button onClick={() => makeNewGrid(rows.rows, width)}>Clear Grid</button>\n                <button>Run</button>\n                <button>Stop</button>\n            </div>\n            <div className=\"grid\" onDragStart={(e)=>e.preventDefault()} onDrop={(e)=>e.preventDefault()}>\n                <div style={{ display: 'grid', gridTemplateColumns: `repeat(${rows.rows}, 1fr)` }}>\n                    {/* {grid?.map((cells) => {\n                        return cells.map((cell, i) => {\n                            return (\n                                <div key={i}>\n                                    {cell}\n                                </div>\n                            )\n                        })\n                    })} */}\n                    {colorGrid?.map((colors, j) => {\n                        return colors.map((color, i) => {\n                            return (\n                                <Cell\n                                    width={width}\n                                    state={color}\n                                    key={`${i}-${j}!`}\n                                />\n                            )\n                        })\n                    })}\n                </div>\n            </div>\n        </div>\n    );\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}