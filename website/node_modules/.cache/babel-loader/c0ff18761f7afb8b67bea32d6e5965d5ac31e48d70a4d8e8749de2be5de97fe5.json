{"ast":null,"code":"import _createForOfIteratorHelper from\"/home/krug/Coding/Python/Pathfinding-Algorithms/website/node_modules/.pnpm/@babel+runtime@7.22.5/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";import _slicedToArray from\"/home/krug/Coding/Python/Pathfinding-Algorithms/website/node_modules/.pnpm/@babel+runtime@7.22.5/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import _toConsumableArray from\"/home/krug/Coding/Python/Pathfinding-Algorithms/website/node_modules/.pnpm/@babel+runtime@7.22.5/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";import{getNeighbors,reconstructPath}from\"./helper\";export default function dfs(colorGrid,setGrid,endPoints){var grid=_toConsumableArray(colorGrid);var stack=[];var previous={};stack.push(endPoints.start);var found=false;while(stack.length>0&&!found){var _ref=stack.pop(),_ref2=_slicedToArray(_ref,2),y=_ref2[0],x=_ref2[1];if(grid[y][x]===\"red\"){continue;}if(grid[y][x]!==\"orange\"){grid[y][x]=\"red\";}var _iterator=_createForOfIteratorHelper(getNeighbors(grid,[y,x])),_step;try{for(_iterator.s();!(_step=_iterator.n()).done;){var neighbor=_step.value;var _neighbor=_slicedToArray(neighbor,2),ny=_neighbor[0],nx=_neighbor[1];if(grid[ny][nx]!==\"red\"){if(grid[ny][nx]===\"blue\"){previous[\"\".concat(ny,\"-\").concat(nx)]=[y,x];found=true;reconstructPath(grid,previous,endPoints.end);break;}else{previous[\"\".concat(ny,\"-\").concat(nx)]=[y,x];stack.push(neighbor);if(grid[ny][nx]!==\"orange\"){grid[ny][nx]=\"green\";}}}}}catch(err){_iterator.e(err);}finally{_iterator.f();}setGrid(grid);}}","map":{"version":3,"names":["getNeighbors","reconstructPath","dfs","colorGrid","setGrid","endPoints","grid","_toConsumableArray","stack","previous","push","start","found","length","_ref","pop","_ref2","_slicedToArray","y","x","_iterator","_createForOfIteratorHelper","_step","s","n","done","neighbor","value","_neighbor","ny","nx","concat","end","err","e","f"],"sources":["/home/krug/Coding/Python/Pathfinding-Algorithms/website/src/algorithms/dfs.ts"],"sourcesContent":["import { Interests, States } from \"../components/Panel\"\nimport { getNeighbors, reconstructPath } from \"./helper\";\n\nexport default function dfs(colorGrid: States[][], setGrid: React.Dispatch<React.SetStateAction<States[][]>>, endPoints: Interests) {\n    let grid: States[][] = [...colorGrid];\n    let stack: [number, number][] = [];\n    let previous : any = {};\n\n    stack.push(endPoints.start);\n    \n    let found: boolean = false;\n    \n    while (stack.length > 0 && !found) {\n        let [y, x] = stack.pop()!;\n\n        if (grid[y][x] === \"red\") {\n            continue;\n        }\n\n        if (grid[y][x] !== \"orange\") {\n            grid[y][x] = \"red\";\n        }\n\n        for (const neighbor of getNeighbors(grid, [y, x])) {\n            let [ny, nx] = neighbor;\n            if (grid[ny][nx] !== \"red\") {\n                if (grid[ny][nx] === \"blue\") {\n                    previous[`${ny}-${nx}`] = [y,x];\n                    found = true;\n                    reconstructPath(grid, previous, endPoints.end);\n                    break;\n                } else {\n                    previous[`${ny}-${nx}`] = [y,x];\n                    stack.push(neighbor);\n\n                    if (grid[ny][nx] !== \"orange\") {\n                        grid[ny][nx] = \"green\"\n                    }\n                }\n            }\n        }\n        setGrid(grid)\n    }\n}"],"mappings":"kkBACA,OAASA,YAAY,CAAEC,eAAe,KAAQ,UAAU,CAExD,cAAe,SAAS,CAAAC,GAAGA,CAACC,SAAqB,CAAEC,OAAyD,CAAEC,SAAoB,CAAE,CAChI,GAAI,CAAAC,IAAgB,CAAAC,kBAAA,CAAOJ,SAAS,CAAC,CACrC,GAAI,CAAAK,KAAyB,CAAG,EAAE,CAClC,GAAI,CAAAC,QAAc,CAAG,CAAC,CAAC,CAEvBD,KAAK,CAACE,IAAI,CAACL,SAAS,CAACM,KAAK,CAAC,CAE3B,GAAI,CAAAC,KAAc,CAAG,KAAK,CAE1B,MAAOJ,KAAK,CAACK,MAAM,CAAG,CAAC,EAAI,CAACD,KAAK,CAAE,CAC/B,IAAAE,IAAA,CAAaN,KAAK,CAACO,GAAG,CAAC,CAAC,CAAAC,KAAA,CAAAC,cAAA,CAAAH,IAAA,IAAnBI,CAAC,CAAAF,KAAA,IAAEG,CAAC,CAAAH,KAAA,IAET,GAAIV,IAAI,CAACY,CAAC,CAAC,CAACC,CAAC,CAAC,GAAK,KAAK,CAAE,CACtB,SACJ,CAEA,GAAIb,IAAI,CAACY,CAAC,CAAC,CAACC,CAAC,CAAC,GAAK,QAAQ,CAAE,CACzBb,IAAI,CAACY,CAAC,CAAC,CAACC,CAAC,CAAC,CAAG,KAAK,CACtB,CAAC,IAAAC,SAAA,CAAAC,0BAAA,CAEsBrB,YAAY,CAACM,IAAI,CAAE,CAACY,CAAC,CAAEC,CAAC,CAAC,CAAC,EAAAG,KAAA,KAAjD,IAAAF,SAAA,CAAAG,CAAA,KAAAD,KAAA,CAAAF,SAAA,CAAAI,CAAA,IAAAC,IAAA,EAAmD,IAAxC,CAAAC,QAAQ,CAAAJ,KAAA,CAAAK,KAAA,CACf,IAAAC,SAAA,CAAAX,cAAA,CAAeS,QAAQ,IAAlBG,EAAE,CAAAD,SAAA,IAAEE,EAAE,CAAAF,SAAA,IACX,GAAItB,IAAI,CAACuB,EAAE,CAAC,CAACC,EAAE,CAAC,GAAK,KAAK,CAAE,CACxB,GAAIxB,IAAI,CAACuB,EAAE,CAAC,CAACC,EAAE,CAAC,GAAK,MAAM,CAAE,CACzBrB,QAAQ,IAAAsB,MAAA,CAAIF,EAAE,MAAAE,MAAA,CAAID,EAAE,EAAG,CAAG,CAACZ,CAAC,CAACC,CAAC,CAAC,CAC/BP,KAAK,CAAG,IAAI,CACZX,eAAe,CAACK,IAAI,CAAEG,QAAQ,CAAEJ,SAAS,CAAC2B,GAAG,CAAC,CAC9C,MACJ,CAAC,IAAM,CACHvB,QAAQ,IAAAsB,MAAA,CAAIF,EAAE,MAAAE,MAAA,CAAID,EAAE,EAAG,CAAG,CAACZ,CAAC,CAACC,CAAC,CAAC,CAC/BX,KAAK,CAACE,IAAI,CAACgB,QAAQ,CAAC,CAEpB,GAAIpB,IAAI,CAACuB,EAAE,CAAC,CAACC,EAAE,CAAC,GAAK,QAAQ,CAAE,CAC3BxB,IAAI,CAACuB,EAAE,CAAC,CAACC,EAAE,CAAC,CAAG,OAAO,CAC1B,CACJ,CACJ,CACJ,CAAC,OAAAG,GAAA,EAAAb,SAAA,CAAAc,CAAA,CAAAD,GAAA,WAAAb,SAAA,CAAAe,CAAA,IACD/B,OAAO,CAACE,IAAI,CAAC,CACjB,CACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}