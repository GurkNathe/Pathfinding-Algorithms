{"ast":null,"code":"import _createForOfIteratorHelper from\"/home/krug/Coding/Python/Pathfinding-Algorithms/website/node_modules/.pnpm/@babel+runtime@7.22.5/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";import _slicedToArray from\"/home/krug/Coding/Python/Pathfinding-Algorithms/website/node_modules/.pnpm/@babel+runtime@7.22.5/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import _toConsumableArray from\"/home/krug/Coding/Python/Pathfinding-Algorithms/website/node_modules/.pnpm/@babel+runtime@7.22.5/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";import{getNeighbors,reconstructPath}from\"./helper\";export default function bfs(colorGrid,setGrid,endPoints){var grid=_toConsumableArray(colorGrid);var nodes=[];nodes.push(endPoints.start);var previous={};var found=false;while(nodes.length>0&&!found){var _ref=nodes.shift(),_ref2=_slicedToArray(_ref,2),i=_ref2[0],j=_ref2[1];if(grid[i][j]===\"red\"){continue;}if(grid[i][j]!==\"orange\"){grid[i][j]=\"red\";}var _iterator=_createForOfIteratorHelper(getNeighbors(grid,[i,j])),_step;try{for(_iterator.s();!(_step=_iterator.n()).done;){var neighbor=_step.value;var _neighbor=_slicedToArray(neighbor,2),ni=_neighbor[0],nj=_neighbor[1];var nColor=grid[ni][nj];if(nColor!==\"red\"){if(nColor===\"blue\"){previous[\"\".concat(ni,\"-\").concat(nj)]=[i,j];found=true;reconstructPath(grid,previous,endPoints.end);break;}else{previous[\"\".concat(ni,\"-\").concat(nj)]=[i,j];nodes.push(neighbor);if(nColor!==\"orange\"){grid[ni][nj]=\"green\";}}}}}catch(err){_iterator.e(err);}finally{_iterator.f();}setGrid(grid);}}","map":{"version":3,"names":["getNeighbors","reconstructPath","bfs","colorGrid","setGrid","endPoints","grid","_toConsumableArray","nodes","push","start","previous","found","length","_ref","shift","_ref2","_slicedToArray","i","j","_iterator","_createForOfIteratorHelper","_step","s","n","done","neighbor","value","_neighbor","ni","nj","nColor","concat","end","err","e","f"],"sources":["/home/krug/Coding/Python/Pathfinding-Algorithms/website/src/algorithms/bfs.ts"],"sourcesContent":["import { Interests, States } from \"../components/Panel\"\nimport { getNeighbors, reconstructPath } from \"./helper\";\n\nexport default function bfs(colorGrid: States[][], setGrid: React.Dispatch<React.SetStateAction<States[][]>>, endPoints: Interests) {\n    let grid = [...colorGrid];\n    let nodes: [number, number][] = [];\n    nodes.push(endPoints.start)\n\n    let previous : any = {};\n\n    let found : boolean = false;\n    while (nodes.length > 0 && !found) {\n        let [i, j] = nodes.shift()!;\n\n        if (grid[i][j] === \"red\") {\n            continue;\n        }\n\n        if (grid[i][j] !== \"orange\") {\n            grid[i][j] = \"red\";\n        }\n\n        for (const neighbor of getNeighbors(grid, [i,j])) {\n            let [ni, nj] = neighbor;\n            let nColor : States = grid[ni][nj];\n            if (nColor !== \"red\") {\n                if (nColor === \"blue\") {\n                    previous[`${ni}-${nj}`] = [i,j];\n                    found = true;\n                    reconstructPath(grid, previous, endPoints.end);\n                    break;\n                } else {\n                    previous[`${ni}-${nj}`] = [i,j];\n                    nodes.push(neighbor);\n                    \n                    if (nColor !== \"orange\") {\n                        grid[ni][nj] = \"green\";\n                    }\n                }\n            }\n        }\n\n        setGrid(grid);\n    }\n}"],"mappings":"kkBACA,OAASA,YAAY,CAAEC,eAAe,KAAQ,UAAU,CAExD,cAAe,SAAS,CAAAC,GAAGA,CAACC,SAAqB,CAAEC,OAAyD,CAAEC,SAAoB,CAAE,CAChI,GAAI,CAAAC,IAAI,CAAAC,kBAAA,CAAOJ,SAAS,CAAC,CACzB,GAAI,CAAAK,KAAyB,CAAG,EAAE,CAClCA,KAAK,CAACC,IAAI,CAACJ,SAAS,CAACK,KAAK,CAAC,CAE3B,GAAI,CAAAC,QAAc,CAAG,CAAC,CAAC,CAEvB,GAAI,CAAAC,KAAe,CAAG,KAAK,CAC3B,MAAOJ,KAAK,CAACK,MAAM,CAAG,CAAC,EAAI,CAACD,KAAK,CAAE,CAC/B,IAAAE,IAAA,CAAaN,KAAK,CAACO,KAAK,CAAC,CAAC,CAAAC,KAAA,CAAAC,cAAA,CAAAH,IAAA,IAArBI,CAAC,CAAAF,KAAA,IAAEG,CAAC,CAAAH,KAAA,IAET,GAAIV,IAAI,CAACY,CAAC,CAAC,CAACC,CAAC,CAAC,GAAK,KAAK,CAAE,CACtB,SACJ,CAEA,GAAIb,IAAI,CAACY,CAAC,CAAC,CAACC,CAAC,CAAC,GAAK,QAAQ,CAAE,CACzBb,IAAI,CAACY,CAAC,CAAC,CAACC,CAAC,CAAC,CAAG,KAAK,CACtB,CAAC,IAAAC,SAAA,CAAAC,0BAAA,CAEsBrB,YAAY,CAACM,IAAI,CAAE,CAACY,CAAC,CAACC,CAAC,CAAC,CAAC,EAAAG,KAAA,KAAhD,IAAAF,SAAA,CAAAG,CAAA,KAAAD,KAAA,CAAAF,SAAA,CAAAI,CAAA,IAAAC,IAAA,EAAkD,IAAvC,CAAAC,QAAQ,CAAAJ,KAAA,CAAAK,KAAA,CACf,IAAAC,SAAA,CAAAX,cAAA,CAAeS,QAAQ,IAAlBG,EAAE,CAAAD,SAAA,IAAEE,EAAE,CAAAF,SAAA,IACX,GAAI,CAAAG,MAAe,CAAGzB,IAAI,CAACuB,EAAE,CAAC,CAACC,EAAE,CAAC,CAClC,GAAIC,MAAM,GAAK,KAAK,CAAE,CAClB,GAAIA,MAAM,GAAK,MAAM,CAAE,CACnBpB,QAAQ,IAAAqB,MAAA,CAAIH,EAAE,MAAAG,MAAA,CAAIF,EAAE,EAAG,CAAG,CAACZ,CAAC,CAACC,CAAC,CAAC,CAC/BP,KAAK,CAAG,IAAI,CACZX,eAAe,CAACK,IAAI,CAAEK,QAAQ,CAAEN,SAAS,CAAC4B,GAAG,CAAC,CAC9C,MACJ,CAAC,IAAM,CACHtB,QAAQ,IAAAqB,MAAA,CAAIH,EAAE,MAAAG,MAAA,CAAIF,EAAE,EAAG,CAAG,CAACZ,CAAC,CAACC,CAAC,CAAC,CAC/BX,KAAK,CAACC,IAAI,CAACiB,QAAQ,CAAC,CAEpB,GAAIK,MAAM,GAAK,QAAQ,CAAE,CACrBzB,IAAI,CAACuB,EAAE,CAAC,CAACC,EAAE,CAAC,CAAG,OAAO,CAC1B,CACJ,CACJ,CACJ,CAAC,OAAAI,GAAA,EAAAd,SAAA,CAAAe,CAAA,CAAAD,GAAA,WAAAd,SAAA,CAAAgB,CAAA,IAEDhC,OAAO,CAACE,IAAI,CAAC,CACjB,CACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}