{"ast":null,"code":"import { getNeighbors } from \"./helper\";\nexport default function bfs(grid, setGrid, endPoints) {\n  let nodes = [];\n  nodes.push(endPoints.start);\n  let previous = {};\n  let found = false;\n  while (nodes.length > 0 && !found) {\n    let [i, j] = nodes.shift();\n    if (grid[i][j] === \"red\") {\n      continue;\n    }\n    setGrid(prev => {\n      let newGrid = [...prev];\n      newGrid[i][j] = \"red\";\n      return newGrid;\n    });\n    for (const neighbor of getNeighbors(grid, [i, j])) {\n      let [ni, nj] = neighbor;\n      let nColor = grid[ni][nj];\n      if (nColor !== \"red\") {\n        if (nColor === \"blue\") {\n          previous[`${ni}-${nj}`] = [i, j];\n          found = true;\n          // reconstruct path\n          break;\n        } else {\n          previous[`${ni}-${nj}`] = [i, j];\n          nodes.push(neighbor);\n          if (nColor !== \"orange\") {\n            setGrid(prev => {\n              let newGrid = [...prev];\n              newGrid[i][j] = \"green\";\n              return newGrid;\n            });\n          }\n        }\n      }\n    }\n  }\n}","map":{"version":3,"names":["getNeighbors","bfs","grid","setGrid","endPoints","nodes","push","start","previous","found","length","i","j","shift","prev","newGrid","neighbor","ni","nj","nColor"],"sources":["/home/krug/Coding/Python/Pathfinding-Algorithms/website/src/algorithms/bfs.ts"],"sourcesContent":["import { Interests, States } from \"../components/Panel\"\nimport { getNeighbors } from \"./helper\";\n\nexport default function bfs(grid: States[][], setGrid: React.Dispatch<React.SetStateAction<States[][]>>, endPoints: Interests) {\n    let nodes: [number, number][] = [];\n    nodes.push(endPoints.start)\n\n    let previous : any = {};\n\n    let found : boolean = false;\n    while (nodes.length > 0 && !found) {\n        let [i, j] = nodes.shift()!;\n\n        if (grid[i][j] === \"red\") {\n            continue;\n        }\n\n        setGrid((prev) => {\n            let newGrid = [...prev];\n\n            newGrid[i][j] = \"red\";\n\n            return newGrid;\n        })\n        \n        for (const neighbor of getNeighbors(grid, [i,j])) {\n            let [ni, nj] = neighbor;\n            let nColor : States = grid[ni][nj];\n            if (nColor !== \"red\") {\n                if (nColor === \"blue\") {\n                    previous[`${ni}-${nj}`] = [i,j];\n                    found = true;\n                    // reconstruct path\n                    break;\n                } else {\n                    previous[`${ni}-${nj}`] = [i,j];\n                    nodes.push(neighbor);\n                    \n                    if (nColor !== \"orange\") {\n                        setGrid((prev) => {\n                            let newGrid = [...prev];\n                            \n                            newGrid[i][j] = \"green\";\n                            \n                            return newGrid;\n                        })\n                    }\n                }\n            }\n        }\n    }\n}"],"mappings":"AACA,SAASA,YAAY,QAAQ,UAAU;AAEvC,eAAe,SAASC,GAAGA,CAACC,IAAgB,EAAEC,OAAyD,EAAEC,SAAoB,EAAE;EAC3H,IAAIC,KAAyB,GAAG,EAAE;EAClCA,KAAK,CAACC,IAAI,CAACF,SAAS,CAACG,KAAK,CAAC;EAE3B,IAAIC,QAAc,GAAG,CAAC,CAAC;EAEvB,IAAIC,KAAe,GAAG,KAAK;EAC3B,OAAOJ,KAAK,CAACK,MAAM,GAAG,CAAC,IAAI,CAACD,KAAK,EAAE;IAC/B,IAAI,CAACE,CAAC,EAAEC,CAAC,CAAC,GAAGP,KAAK,CAACQ,KAAK,CAAC,CAAE;IAE3B,IAAIX,IAAI,CAACS,CAAC,CAAC,CAACC,CAAC,CAAC,KAAK,KAAK,EAAE;MACtB;IACJ;IAEAT,OAAO,CAAEW,IAAI,IAAK;MACd,IAAIC,OAAO,GAAG,CAAC,GAAGD,IAAI,CAAC;MAEvBC,OAAO,CAACJ,CAAC,CAAC,CAACC,CAAC,CAAC,GAAG,KAAK;MAErB,OAAOG,OAAO;IAClB,CAAC,CAAC;IAEF,KAAK,MAAMC,QAAQ,IAAIhB,YAAY,CAACE,IAAI,EAAE,CAACS,CAAC,EAACC,CAAC,CAAC,CAAC,EAAE;MAC9C,IAAI,CAACK,EAAE,EAAEC,EAAE,CAAC,GAAGF,QAAQ;MACvB,IAAIG,MAAe,GAAGjB,IAAI,CAACe,EAAE,CAAC,CAACC,EAAE,CAAC;MAClC,IAAIC,MAAM,KAAK,KAAK,EAAE;QAClB,IAAIA,MAAM,KAAK,MAAM,EAAE;UACnBX,QAAQ,CAAE,GAAES,EAAG,IAAGC,EAAG,EAAC,CAAC,GAAG,CAACP,CAAC,EAACC,CAAC,CAAC;UAC/BH,KAAK,GAAG,IAAI;UACZ;UACA;QACJ,CAAC,MAAM;UACHD,QAAQ,CAAE,GAAES,EAAG,IAAGC,EAAG,EAAC,CAAC,GAAG,CAACP,CAAC,EAACC,CAAC,CAAC;UAC/BP,KAAK,CAACC,IAAI,CAACU,QAAQ,CAAC;UAEpB,IAAIG,MAAM,KAAK,QAAQ,EAAE;YACrBhB,OAAO,CAAEW,IAAI,IAAK;cACd,IAAIC,OAAO,GAAG,CAAC,GAAGD,IAAI,CAAC;cAEvBC,OAAO,CAACJ,CAAC,CAAC,CAACC,CAAC,CAAC,GAAG,OAAO;cAEvB,OAAOG,OAAO;YAClB,CAAC,CAAC;UACN;QACJ;MACJ;IACJ;EACJ;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}