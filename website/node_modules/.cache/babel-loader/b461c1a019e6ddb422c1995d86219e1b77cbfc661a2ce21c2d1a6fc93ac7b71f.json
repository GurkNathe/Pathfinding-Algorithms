{"ast":null,"code":"export function getNeighbors(grid, pos) {\n  let [i, j] = pos;\n  let neighbors = [];\n  if (i - 1 > 0 && grid[i - 1][j] !== \"black\") {\n    neighbors.push([i - 1, j]);\n  }\n  if (j - 1 > 0 && grid[i][j - 1] !== \"black\") {\n    neighbors.push([i, j - 1]);\n  }\n  if (i + 1 < grid.length && grid[i + 1][j] !== \"black\") {\n    neighbors.push([i + 1, j]);\n  }\n  if (j + 1 < grid[0].length && grid[i][j + 1] !== \"black\") {\n    neighbors.push([i, j + 1]);\n  }\n  return neighbors;\n}\nexport function reconstructPath(grid, path, current) {\n  while (path.keys().includes(`${current[0]}-${current[1]}`)) {\n    if (grid[current[0]][current[1]] !== \"orange\") {\n      current = path[`${current[0]}-${current[1]}`];\n      grid[current[0]][current[1]] = \"purple\";\n    } else {\n      break;\n    }\n  }\n}","map":{"version":3,"names":["getNeighbors","grid","pos","i","j","neighbors","push","length","reconstructPath","path","current","keys","includes"],"sources":["/home/krug/Coding/Python/Pathfinding-Algorithms/website/src/algorithms/helper.ts"],"sourcesContent":["import { States } from \"../components/Panel\";\n\nexport function getNeighbors(grid: States[][], pos: [number, number]) {\n    let [i, j] = pos;\n\n    let neighbors : [number, number][] = [];\n\n    if (i - 1 > 0 && grid[i - 1][j] !== \"black\") {\n        neighbors.push([i - 1, j]);\n    }\n    if (j - 1 > 0 && grid[i][j - 1] !== \"black\") {\n        neighbors.push([i, j - 1]);\n    }\n    if (i + 1 < grid.length && grid[i + 1][j] !== \"black\") {\n        neighbors.push([i + 1, j]);\n    }\n    if (j + 1 < grid[0].length && grid[i][j + 1] !== \"black\") {\n        neighbors.push([i, j + 1]);\n    }\n\n    return neighbors;\n}\n\nexport function reconstructPath(grid: States[][], path: any, current: [number, number])  {\n    while (path.keys().includes(`${current[0]}-${current[1]}`)) {\n        if (grid[current[0]][current[1]] !== \"orange\") {\n            current = path[`${current[0]}-${current[1]}`]\n            grid[current[0]][current[1]] = \"purple\";\n        } else {\n            break;\n        }\n    }\n}"],"mappings":"AAEA,OAAO,SAASA,YAAYA,CAACC,IAAgB,EAAEC,GAAqB,EAAE;EAClE,IAAI,CAACC,CAAC,EAAEC,CAAC,CAAC,GAAGF,GAAG;EAEhB,IAAIG,SAA8B,GAAG,EAAE;EAEvC,IAAIF,CAAC,GAAG,CAAC,GAAG,CAAC,IAAIF,IAAI,CAACE,CAAC,GAAG,CAAC,CAAC,CAACC,CAAC,CAAC,KAAK,OAAO,EAAE;IACzCC,SAAS,CAACC,IAAI,CAAC,CAACH,CAAC,GAAG,CAAC,EAAEC,CAAC,CAAC,CAAC;EAC9B;EACA,IAAIA,CAAC,GAAG,CAAC,GAAG,CAAC,IAAIH,IAAI,CAACE,CAAC,CAAC,CAACC,CAAC,GAAG,CAAC,CAAC,KAAK,OAAO,EAAE;IACzCC,SAAS,CAACC,IAAI,CAAC,CAACH,CAAC,EAAEC,CAAC,GAAG,CAAC,CAAC,CAAC;EAC9B;EACA,IAAID,CAAC,GAAG,CAAC,GAAGF,IAAI,CAACM,MAAM,IAAIN,IAAI,CAACE,CAAC,GAAG,CAAC,CAAC,CAACC,CAAC,CAAC,KAAK,OAAO,EAAE;IACnDC,SAAS,CAACC,IAAI,CAAC,CAACH,CAAC,GAAG,CAAC,EAAEC,CAAC,CAAC,CAAC;EAC9B;EACA,IAAIA,CAAC,GAAG,CAAC,GAAGH,IAAI,CAAC,CAAC,CAAC,CAACM,MAAM,IAAIN,IAAI,CAACE,CAAC,CAAC,CAACC,CAAC,GAAG,CAAC,CAAC,KAAK,OAAO,EAAE;IACtDC,SAAS,CAACC,IAAI,CAAC,CAACH,CAAC,EAAEC,CAAC,GAAG,CAAC,CAAC,CAAC;EAC9B;EAEA,OAAOC,SAAS;AACpB;AAEA,OAAO,SAASG,eAAeA,CAACP,IAAgB,EAAEQ,IAAS,EAAEC,OAAyB,EAAG;EACrF,OAAOD,IAAI,CAACE,IAAI,CAAC,CAAC,CAACC,QAAQ,CAAE,GAAEF,OAAO,CAAC,CAAC,CAAE,IAAGA,OAAO,CAAC,CAAC,CAAE,EAAC,CAAC,EAAE;IACxD,IAAIT,IAAI,CAACS,OAAO,CAAC,CAAC,CAAC,CAAC,CAACA,OAAO,CAAC,CAAC,CAAC,CAAC,KAAK,QAAQ,EAAE;MAC3CA,OAAO,GAAGD,IAAI,CAAE,GAAEC,OAAO,CAAC,CAAC,CAAE,IAAGA,OAAO,CAAC,CAAC,CAAE,EAAC,CAAC;MAC7CT,IAAI,CAACS,OAAO,CAAC,CAAC,CAAC,CAAC,CAACA,OAAO,CAAC,CAAC,CAAC,CAAC,GAAG,QAAQ;IAC3C,CAAC,MAAM;MACH;IACJ;EACJ;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}