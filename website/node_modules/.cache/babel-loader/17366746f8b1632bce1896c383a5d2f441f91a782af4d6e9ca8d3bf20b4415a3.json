{"ast":null,"code":"import _createForOfIteratorHelper from\"/home/krug/Coding/Python/Pathfinding-Algorithms/website/node_modules/.pnpm/@babel+runtime@7.22.5/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";import _slicedToArray from\"/home/krug/Coding/Python/Pathfinding-Algorithms/website/node_modules/.pnpm/@babel+runtime@7.22.5/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import _toConsumableArray from\"/home/krug/Coding/Python/Pathfinding-Algorithms/website/node_modules/.pnpm/@babel+runtime@7.22.5/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";import{PriorityQueue,getNeighbors,reconstructPath}from\"./helper\";export default function dijkstra(colorGrid,setGrid,endPoints){var grid=_toConsumableArray(colorGrid);var queue=new PriorityQueue();var gscore={};for(var i=0;i<grid.length;i++){for(var j=0;j<grid[0].length;j++){gscore[\"\".concat(i,\"-\").concat(j)]=Infinity;}}gscore[\"\".concat(endPoints.start[0],\"-\").concat(endPoints.start[1])]=0;var previous={};queue.enqueue(endPoints.start,0,0);var count=0;while(!queue.isEmpty()){var _queue$dequeue=queue.dequeue(),_queue$dequeue2=_slicedToArray(_queue$dequeue,2),y=_queue$dequeue2[0],x=_queue$dequeue2[1];if(grid[y][x]===\"blue\"){reconstructPath(grid,previous,[y,x]);break;}if(grid[y][x]!==\"orange\"){grid[y][x]=\"red\";}var _iterator=_createForOfIteratorHelper(getNeighbors(grid,[y,x])),_step;try{for(_iterator.s();!(_step=_iterator.n()).done;){var neighbor=_step.value;var _neighbor=_slicedToArray(neighbor,2),ny=_neighbor[0],nx=_neighbor[1];if(grid[ny][nx]!==\"red\"){var temp_gscore=gscore[\"\".concat(y,\"-\").concat(x)]+1;if(temp_gscore<gscore[\"\".concat(ny,\"-\").concat(nx)]){gscore[\"\".concat(ny,\"-\").concat(nx)]=temp_gscore;previous[\"\".concat(ny,\"-\").concat(nx)]=[y,x];count++;queue.enqueue(neighbor,temp_gscore,count);if(grid[ny][nx]!==\"orange\"&&grid[ny][nx]!==\"blue\"){grid[ny][nx]=\"green\";}}}}}catch(err){_iterator.e(err);}finally{_iterator.f();}setGrid(grid);}}","map":{"version":3,"names":["PriorityQueue","getNeighbors","reconstructPath","dijkstra","colorGrid","setGrid","endPoints","grid","_toConsumableArray","queue","gscore","i","length","j","concat","Infinity","start","previous","enqueue","count","isEmpty","_queue$dequeue","dequeue","_queue$dequeue2","_slicedToArray","y","x","_iterator","_createForOfIteratorHelper","_step","s","n","done","neighbor","value","_neighbor","ny","nx","temp_gscore","err","e","f"],"sources":["/home/krug/Coding/Python/Pathfinding-Algorithms/website/src/algorithms/dijkstra.ts"],"sourcesContent":["import { Interests, States } from \"../components/Panel\"\nimport { PriorityQueue, getNeighbors, reconstructPath } from \"./helper\";\n\nexport default function dijkstra(colorGrid: States[][], setGrid: React.Dispatch<React.SetStateAction<States[][]>>, endPoints: Interests) {\n    let grid: States[][] = [...colorGrid];\n    let queue: PriorityQueue = new PriorityQueue();\n\n    let gscore: any = {};\n    for (let i = 0; i < grid.length; i++) {\n        for (let j = 0; j < grid[0].length; j++) {\n            gscore[`${i}-${j}`] = Infinity;\n        }\n    }\n    gscore[`${endPoints.start[0]}-${endPoints.start[1]}`] = 0;\n\n    let previous: any = {};\n\n    queue.enqueue(endPoints.start, 0, 0);\n\n    let count: number = 0\n\n    while(!queue.isEmpty()) {\n        let [y, x] = queue.dequeue();\n\n        if (grid[y][x] === \"blue\") {\n            reconstructPath(grid, previous, [y, x]);\n            break;\n        }\n\n        if (grid[y][x] !== \"orange\") {\n            grid[y][x] = \"red\";\n        }\n\n        for (const neighbor of getNeighbors(grid, [y, x])) {\n            let [ny, nx] = neighbor;\n            if (grid[ny][nx] !== \"red\") {\n                let temp_gscore = gscore[`${y}-${x}`] + 1;\n                \n                if (temp_gscore < gscore[`${ny}-${nx}`]) {\n                    gscore[`${ny}-${nx}`] = temp_gscore;\n                    previous[`${ny}-${nx}`] = [y, x];\n\n                    count++;\n                    queue.enqueue(neighbor, temp_gscore, count);\n\n                    if (grid[ny][nx] !== \"orange\" && grid[ny][nx] !== \"blue\") {\n                        grid[ny][nx] = \"green\";\n                    }\n                }\n            }\n        }\n\n        setGrid(grid);\n    }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}