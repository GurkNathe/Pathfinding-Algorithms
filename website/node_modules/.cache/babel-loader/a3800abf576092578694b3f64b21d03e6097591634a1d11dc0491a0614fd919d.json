{"ast":null,"code":"import _createForOfIteratorHelper from\"/home/krug/Coding/Python/Pathfinding-Algorithms/website/node_modules/.pnpm/@babel+runtime@7.22.5/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";import _slicedToArray from\"/home/krug/Coding/Python/Pathfinding-Algorithms/website/node_modules/.pnpm/@babel+runtime@7.22.5/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import _toConsumableArray from\"/home/krug/Coding/Python/Pathfinding-Algorithms/website/node_modules/.pnpm/@babel+runtime@7.22.5/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";import{PriorityQueue,getNeighbors,heuristic,reconstructPath}from\"./helper\";export default function gbls(colorGrid,setGrid,endPoints){var grid=_toConsumableArray(colorGrid);var queue=new PriorityQueue();queue.enqueue(endPoints.start,heuristic(\"manhattan\",grid,endPoints.start,endPoints.end),0);var count=0;var found=false;var previous={};var lastdir=[-1,-1];var _loop=function _loop(){var _queue$dequeue=queue.dequeue(),_queue$dequeue2=_slicedToArray(_queue$dequeue,2),y=_queue$dequeue2[0],x=_queue$dequeue2[1];if(grid[y][x]===\"red\"){return\"continue\";}if(grid[y][x]!==\"orange\"&&grid[y][x]!==\"blue\"){grid[y][x]=\"red\";}var neighbors=getNeighbors(grid,[y,x]);if(lastdir[0]!==-1){var tempNeighbors=neighbors.filter(function(n){return n[0]-y===lastdir[0]&&n[1]-x===lastdir[1];});var _iterator=_createForOfIteratorHelper(neighbors),_step;try{var _loop2=function _loop2(){var n=_step.value;var i=tempNeighbors.findIndex(function(item){return item[0]===n[0]&&item[1]===n[1];});if(i===-1){tempNeighbors.push(n);}};for(_iterator.s();!(_step=_iterator.n()).done;){_loop2();}}catch(err){_iterator.e(err);}finally{_iterator.f();}neighbors=tempNeighbors;}var _iterator2=_createForOfIteratorHelper(neighbors),_step2;try{for(_iterator2.s();!(_step2=_iterator2.n()).done;){var neighbor=_step2.value;var _neighbor=_slicedToArray(neighbor,2),ny=_neighbor[0],nx=_neighbor[1];if(grid[ny][nx]!==\"red\"){if(grid[ny][nx]===\"blue\"){previous[\"\".concat(ny,\"-\").concat(nx)]=[y,x];found=true;reconstructPath(grid,previous,endPoints.end);break;}if(grid[ny][nx]!==\"orange\"){grid[ny][nx]=\"green\";}count++;var distance=heuristic(\"manhattan\",grid,neighbor,endPoints.end);previous[\"\".concat(ny,\"-\").concat(nx)]=[y,x];queue.enqueue(neighbor,distance,count);lastdir=[ny-y,nx-x];}}}catch(err){_iterator2.e(err);}finally{_iterator2.f();}setGrid(grid);};while(!queue.isEmpty()&&!found){var _ret=_loop();if(_ret===\"continue\")continue;}}","map":{"version":3,"names":["PriorityQueue","getNeighbors","heuristic","reconstructPath","gbls","colorGrid","setGrid","endPoints","grid","_toConsumableArray","queue","enqueue","start","end","count","found","previous","lastdir","_loop","_queue$dequeue","dequeue","_queue$dequeue2","_slicedToArray","y","x","neighbors","tempNeighbors","filter","n","_iterator","_createForOfIteratorHelper","_step","_loop2","value","i","findIndex","item","push","s","done","err","e","f","_iterator2","_step2","neighbor","_neighbor","ny","nx","concat","distance","isEmpty","_ret"],"sources":["/home/krug/Coding/Python/Pathfinding-Algorithms/website/src/algorithms/gbls.ts"],"sourcesContent":["import { Interests, States } from \"../components/Panel\"\nimport { PriorityQueue, getNeighbors, heuristic, reconstructPath } from \"./helper\";\n\nexport default function gbls(colorGrid: States[][], setGrid: React.Dispatch<React.SetStateAction<States[][]>>, endPoints: Interests) {\n    let grid: States[][] = [...colorGrid];\n    let queue: PriorityQueue = new PriorityQueue();\n    queue.enqueue(endPoints.start, heuristic(\"manhattan\", grid, endPoints.start, endPoints.end), 0);\n\n    let count: number = 0;\n    let found: boolean = false;\n\n    let previous: any = {};\n    let lastdir: [number, number] = [-1, -1];\n\n    while (!queue.isEmpty() && !found) {\n        let [y, x] = queue.dequeue();\n\n        if (grid[y][x] === \"red\") {\n            continue;\n        }\n\n        if (grid[y][x] !== \"orange\" && grid[y][x] !== \"blue\") {\n            grid[y][x] = \"red\";\n        }\n\n        let neighbors: [number, number][] = getNeighbors(grid, [y,x]);\n\n        if (lastdir[0] !== -1) {\n            let tempNeighbors = neighbors.filter((n) => (n[0] - y === lastdir[0]) && (n[1] - x === lastdir[1]));\n            for (const n of neighbors) {\n                let i = tempNeighbors.findIndex(item => item[0] === n[0] && item[1] === n[1]);\n                if (i === -1) {\n                    tempNeighbors.push(n);\n                }\n            }\n            neighbors = tempNeighbors;\n        }\n\n        for (const neighbor of neighbors) {\n            let [ny, nx] = neighbor;\n            if (grid[ny][nx] !== \"red\") {\n                if (grid[ny][nx] === \"blue\") {\n                    previous[`${ny}-${nx}`] = [y, x];\n                    found = true;\n                    reconstructPath(grid, previous, endPoints.end);\n                    break;\n                }\n                \n                if (grid[ny][nx] !== \"orange\") {\n                    grid[ny][nx] = \"green\";\n                }\n                \n                count++;\n                let distance: number = heuristic(\"manhattan\", grid, neighbor, endPoints.end);\n                \n                previous[`${ny}-${nx}`] = [y, x];\n                queue.enqueue(neighbor, distance, count);\n\n                lastdir = [ny - y, nx - x];\n            }\n        }\n\n        setGrid(grid);\n    }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}