{"ast":null,"code":"var _jsxFileName = \"/home/krug/Coding/Python/Pathfinding-Algorithms/website/src/components/Panel.tsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport \"../css/panel.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Cell = _ref => {\n  let {\n    row: number,\n    width = 50,\n    state = \"white\"\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    onClick: event => {\n      console.log(event.type);\n    },\n    style: {\n      width: `${width}px`,\n      height: `${width}px`,\n      backgroundColor: state,\n      outline: \"solid\",\n      margin: \"1px\"\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 9\n  }, this);\n};\n_c = Cell;\nexport default function Panel() {\n  _s();\n  const [grid, setGrid] = useState();\n  const [rows, setRows] = useState({\n    rows: 50,\n    toSubmit: 50\n  });\n  const [width, setWidth] = useState(10);\n  const options = [\"A*\", \"BFS\", \"DFS\"];\n  useEffect(() => {\n    makeNewGrid(rows.rows, width);\n  }, []);\n  const makeNewGrid = (rows, width) => {\n    let tempOut = [];\n    for (let j = 0; j < rows; j++) {\n      let tempIn = [];\n      for (let i = 0; i < rows; i++) {\n        tempIn.push( /*#__PURE__*/_jsxDEV(Cell, {\n          row: j,\n          width: width,\n          state: \"white\"\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 29\n        }, this));\n      }\n      tempOut.push(tempIn);\n    }\n    setGrid(tempOut);\n  };\n  const changeRows = newRows => {\n    if (isNaN(Number(newRows))) return;\n    setRows({\n      rows: rows.rows,\n      toSubmit: Number(newRows)\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"panel\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"options\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        value: rows.toSubmit,\n        onChange: event => changeRows(event.target.value),\n        onKeyDown: event => {\n          if (event.key === \"Enter\") {\n            setRows({\n              rows: rows.toSubmit,\n              toSubmit: rows.toSubmit\n            });\n            makeNewGrid(rows.toSubmit, width);\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        value: width,\n        onChange: event => setWidth(Number(event.target.value)),\n        onKeyDown: event => {\n          if (event.key === \"Enter\") {\n            setRows({\n              rows: rows.toSubmit,\n              toSubmit: rows.toSubmit\n            });\n            makeNewGrid(rows.toSubmit, width);\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        children: options.map((func, index) => {\n          return /*#__PURE__*/_jsxDEV(\"option\", {\n            value: func,\n            children: func\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 32\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'grid',\n          gridTemplateColumns: `repeat(${rows.rows}, 1fr)`\n        },\n        children: grid === null || grid === void 0 ? void 0 : grid.map(cells => {\n          return cells.map((cell, i) => {\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              children: /*#__PURE__*/_jsxDEV(Cell, {\n                row: cell.props.row,\n                width: cell.props.width,\n                state: i === 5 ? \"red\" : cell.props.state\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 102,\n                columnNumber: 37\n              }, this)\n            }, i, false, {\n              fileName: _jsxFileName,\n              lineNumber: 101,\n              columnNumber: 33\n            }, this);\n          });\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 9\n  }, this);\n}\n_s(Panel, \"jskikpJiYXJG7rOtmPZVcgHI5z4=\");\n_c2 = Panel;\nvar _c, _c2;\n$RefreshReg$(_c, \"Cell\");\n$RefreshReg$(_c2, \"Panel\");","map":{"version":3,"names":["useEffect","useState","jsxDEV","_jsxDEV","Cell","_ref","row","number","width","state","onClick","event","console","log","type","style","height","backgroundColor","outline","margin","fileName","_jsxFileName","lineNumber","columnNumber","_c","Panel","_s","grid","setGrid","rows","setRows","toSubmit","setWidth","options","makeNewGrid","tempOut","j","tempIn","i","push","changeRows","newRows","isNaN","Number","className","children","value","onChange","target","onKeyDown","key","map","func","index","display","gridTemplateColumns","cells","cell","props","_c2","$RefreshReg$"],"sources":["/home/krug/Coding/Python/Pathfinding-Algorithms/website/src/components/Panel.tsx"],"sourcesContent":["import { useEffect, useState } from \"react\";\n\nimport \"../css/panel.css\"\n\ntype CellProps = {\n    row: number\n    width: number\n    state: States\n}\n\ntype States = \"white\" | \"black\" | \"red\" | \"green\" | \"orange\" | \"blue\";\n\ntype Rows = {\n    rows: number\n    toSubmit: number\n}\n\nconst Cell : React.FC<CellProps> = ({row: number, width = 50, state = \"white\"} : CellProps) => {\n    return(\n        <div \n            onClick={(event) => {\n                console.log(event.type)\n            }}\n            style={{\n                width: `${width}px`,\n                height: `${width}px`,\n                backgroundColor: state,\n                outline: \"solid\",\n                margin: \"1px\",\n            }}\n        />\n    )\n}\n\nexport default function Panel() {\n    const [grid, setGrid] = useState<JSX.Element[][]>();\n    const [rows, setRows] = useState<Rows>({rows: 50, toSubmit: 50});\n    const [width, setWidth] = useState<number>(10);\n\n    const options: string[] = [\n        \"A*\", \"BFS\", \"DFS\"\n    ]\n\n    useEffect(() => {\n        makeNewGrid(rows.rows, width);\n    }, [])\n\n    const makeNewGrid = (rows: number, width: number) => {\n        let tempOut : JSX.Element[][] = [];\n\n        for (let j = 0; j < rows; j++) {\n            let tempIn : JSX.Element[] = [];\n            for (let i = 0; i < rows; i++) {\n                tempIn.push(<Cell row={j} width={width} state={\"white\"} key={i}/>)\n            }\n            tempOut.push(tempIn);\n        }\n\n        setGrid(tempOut)\n    }\n\n    const changeRows = (newRows: string) => {\n        if (isNaN(Number(newRows))) return;\n        setRows({rows: rows.rows, toSubmit: Number(newRows)})\n    }\n\n    return(\n        <div className=\"panel\">\n            <div className=\"options\">\n                <input \n                    value={rows.toSubmit} \n                    onChange={(event) => changeRows(event.target.value)}\n                    onKeyDown={(event) => {\n                        if (event.key === \"Enter\") {\n                            setRows({rows: rows.toSubmit, toSubmit: rows.toSubmit})\n                            makeNewGrid(rows.toSubmit, width)\n                        }\n                    }}\n                />\n                <input \n                    value={width} \n                    onChange={(event) => setWidth(Number(event.target.value))}\n                    onKeyDown={(event) => {\n                        if (event.key === \"Enter\") {\n                            setRows({rows: rows.toSubmit, toSubmit: rows.toSubmit})\n                            makeNewGrid(rows.toSubmit, width)\n                        }\n                    }}\n                />\n                <select>\n                    {options.map((func, index) => {\n                        return <option value={func} key={index}>{func}</option>\n                    })}\n                </select>\n            </div>\n            <div className=\"grid\">\n                <div style={{ display: 'grid', gridTemplateColumns: `repeat(${rows.rows}, 1fr)` }}>\n                    {grid?.map((cells) => {\n                        return cells.map((cell, i) => {\n                            return (\n                                <div key={i}>\n                                    <Cell \n                                        row={cell.props.row} \n                                        width={cell.props.width}\n                                        state={ i === 5 ? \"red\" : cell.props.state}\n                                    />\n                                </div>\n                            )\n                        })\n                    })}\n                </div>\n            </div>\n        </div>\n    );\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}