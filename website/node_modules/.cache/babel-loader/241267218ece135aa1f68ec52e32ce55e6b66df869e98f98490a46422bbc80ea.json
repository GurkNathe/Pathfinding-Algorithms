{"ast":null,"code":"import _createForOfIteratorHelper from\"/home/krug/Coding/Python/Pathfinding-Algorithms/website/node_modules/.pnpm/@babel+runtime@7.22.5/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";import _slicedToArray from\"/home/krug/Coding/Python/Pathfinding-Algorithms/website/node_modules/.pnpm/@babel+runtime@7.22.5/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import _toConsumableArray from\"/home/krug/Coding/Python/Pathfinding-Algorithms/website/node_modules/.pnpm/@babel+runtime@7.22.5/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";import{PriorityQueue,getNeighbors,heuristic,reconstructPath}from\"./helper\";export default function beamsearch(colorGrid,setGrid,endPoints){var grid=_toConsumableArray(colorGrid);var beam=new PriorityQueue();var beamsize=50;beam.enqueue(endPoints.start,0,0);var previous={};previous[\"\".concat(endPoints.start[0],\"-\").concat(endPoints.start[1])]=endPoints.start;var _loop=function _loop(){var _beam$dequeue=beam.dequeue(),_beam$dequeue2=_slicedToArray(_beam$dequeue,2),y=_beam$dequeue2[0],x=_beam$dequeue2[1];if(grid[y][x]===\"blue\"){reconstructPath(grid,previous,[y,x]);return\"break\";}if(grid[y][x]!==\"orange\"){grid[y][x]=\"red\";}var children=getNeighbors(grid,[y,x]);children=children.filter(function(e){return!(e[0]===previous[\"\".concat(y,\"-\").concat(x)][0]&&e[1]===previous[\"\".concat(y,\"-\").concat(x)][1]);});var _iterator=_createForOfIteratorHelper(children),_step;try{for(_iterator.s();!(_step=_iterator.n()).done;){var child=_step.value;var _child=_slicedToArray(child,2),cy=_child[0],cx=_child[1];if(grid[cy][cx]!==\"red\"){previous[\"\".concat(cy,\"-\").concat(cx)]=[y,x];beam.enqueue(child,heuristic(\"manhattan\",grid,child,endPoints.end),0);if(grid[cy][cx]!==\"orange\"&&grid[cy][cx]!==\"blue\"){grid[cy][cx]=\"green\";}}}}catch(err){_iterator.e(err);}finally{_iterator.f();}beam.resize(beamsize);};while(beam.size()>0){var _ret=_loop();if(_ret===\"break\")break;}}","map":{"version":3,"names":["PriorityQueue","getNeighbors","heuristic","reconstructPath","beamsearch","colorGrid","setGrid","endPoints","grid","_toConsumableArray","beam","beamsize","enqueue","start","previous","concat","_loop","_beam$dequeue","dequeue","_beam$dequeue2","_slicedToArray","y","x","children","filter","e","_iterator","_createForOfIteratorHelper","_step","s","n","done","child","value","_child","cy","cx","end","err","f","resize","size","_ret"],"sources":["/home/krug/Coding/Python/Pathfinding-Algorithms/website/src/algorithms/beamsearch.ts"],"sourcesContent":["import { Interests, States } from \"../components/Panel\"\nimport { PriorityQueue, getNeighbors, heuristic, reconstructPath } from \"./helper\";\n\nexport default function beamsearch(colorGrid: States[][], setGrid: React.Dispatch<React.SetStateAction<States[][]>>, endPoints: Interests) {\n    let grid: States[][] = [...colorGrid];\n    let beam = new PriorityQueue();\n    let beamsize = 50;\n    beam.enqueue(endPoints.start, 0, 0);\n\n    let previous: any = {};\n    previous[`${endPoints.start[0]}-${endPoints.start[1]}`] = endPoints.start;\n\n    while (beam.size() > 0) {\n        let [y, x] = beam.dequeue();\n\n        if (grid[y][x] === \"blue\") {\n            reconstructPath(grid, previous, [y, x]);\n            break;\n        }\n\n        if (grid[y][x] !== \"orange\") {\n            grid[y][x] = \"red\";\n        }\n\n        let children = getNeighbors(grid, [y, x]);\n        children = children.filter((e) => {\n            return !(e[0] === previous[`${y}-${x}`][0] && e[1] === previous[`${y}-${x}`][1]);\n        })\n\n        for (const child of children) {\n            let [cy, cx] = child;\n\n            if (grid[cy][cx] !== \"red\") {\n                previous[`${cy}-${cx}`] = [y, x];\n                beam.enqueue(child, heuristic(\"manhattan\", grid, child, endPoints.end), 0);\n\n                if (grid[cy][cx] !== \"orange\" && grid[cy][cx] !== \"blue\") {\n                    grid[cy][cx] = \"green\";\n                }\n            }\n        }\n\n        beam.resize(beamsize)\n    }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}