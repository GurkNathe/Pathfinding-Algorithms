Grid Graph to Tree from starting Node Algorithm (GGTN Algorithm):

In words:

The starting node is labeled with a value of 0. 
From the start node, label all neighbors in increasing order starting from 1 to n-neighbors (neighbors are the up, down, left, and right in this case; labeling was done counter-clockwise, starting from the up neighbor).
Then, go to the smallest neighbor (1) and label all unvalued neighbors with "1" + 1 to n-neighbors (Example: a neighbor of 1 is labeled as 12 or 11 or 13).
Repeat this, going from smallest to largest value neighbor, and continue with the newly labeled neighbors until the grid is fully labeled.
From the start node you can then construct a tree based off of the labelings:

For a 5x5 grid with start at 3 down from to left and 3 right from left
	       _______________0___________
        /           |        |       \
       1            2        3        4
    /  |  \       /   \    /   \      |
   11  12  13    21   22  31   32    41
  /  \  \    \    |    |   |    |
111  112 121 131 211  221 311  321
 |    |           |        |
1111 1121       2111     3111

To reconstruct the graph based on the tree you need to know the method of labeling (i.e. did you label them in a certain order [e.g. clockwise, counter-clockwise])

There is probably a better labeling system than this, but it's the simplest thing I could come up with without thinking too much on it.

Pseudocode:

func grid_graph_to_tree(Start):
    Create a Priority Queue Q
    Set all node values to infinity
    Set Start node value to 0
    current = Start
    
    while Q is not empty:
	add current to Q
    	for every neighbor of current node:
	    label neighbors in increasing order from 1 - n-neighbors
	    remove current from queue
	    current is set to the smallest node value